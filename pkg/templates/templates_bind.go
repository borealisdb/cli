// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// pkg/templates/accounts.yaml
// pkg/templates/cluster-secrets.yaml
// pkg/templates/cluster.yaml
// pkg/templates/config-template.ini
// pkg/templates/credentials-template.ini
// pkg/templates/index.html
// pkg/templates/secrets.yaml
// pkg/templates/templates_bind.go
// pkg/templates/values.yaml
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgTemplatesAccountsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\xbb\xaa\xc3\x30\x10\x84\xe1\x5e\x4f\x31\xf8\xd4\xf6\x21\xad\xaa\x5c\xfa\x94\xe9\xd7\xd2\x16\x22\x5a\xad\x91\xe4\x80\x31\x7e\xf7\xe0\x4b\x48\x91\x72\x86\xef\xa7\x21\x3c\x38\x97\xa0\xc9\xa2\xd7\xcc\x14\x43\xf1\x7d\x17\xf4\xff\x75\x32\xcf\x90\xbc\xc5\xf5\xb8\x6f\x71\x2c\x95\xf3\xc5\x39\x1d\x53\x35\xc2\x95\x3c\x55\xb2\x06\x48\x24\x6c\x31\xcf\xdd\x61\xee\x24\xbc\x2c\x2d\xed\xb4\x18\x20\x52\xcf\xb1\xac\x16\x70\x5f\xf4\x1b\x99\x32\xb0\x5b\xdd\x27\xde\x9b\x16\x2c\x14\xa2\x45\xd3\xe0\x0f\x93\x8e\x79\xdb\x67\xa7\x32\x50\x9a\x3a\xa7\xb2\x39\x20\x6b\x64\x0b\xf2\x12\x92\x79\x07\x00\x00\xff\xff\x65\x90\x8f\x18\xde\x00\x00\x00")

func pkgTemplatesAccountsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesAccountsYaml,
		"pkg/templates/accounts.yaml",
	)
}

func pkgTemplatesAccountsYaml() (*asset, error) {
	bytes, err := pkgTemplatesAccountsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/accounts.yaml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesClusterSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\xc2\x40\x10\x44\xfb\xfb\x8a\x25\xbd\x82\xed\x75\x22\x16\x22\x68\x21\xd8\x6f\x36\x53\x1c\x49\x2e\xe7\xed\x46\x09\x21\xff\x2e\x9a\xa8\x85\xed\xbc\x37\xc3\x70\x0a\x57\x64\x0d\x5d\xf4\x74\xdf\xb8\x3a\xc4\xca\xd3\x05\x92\x61\xae\x85\x71\xc5\xc6\xde\x11\x45\x6e\xe1\x69\x1c\xd7\xbb\xa6\x57\x43\x3e\x71\x8b\x69\x5a\xe9\xdb\x54\x47\xd4\x70\x89\x46\x5f\x2a\x91\xfc\x9c\xff\x8e\xb3\x21\xc1\xd3\x39\xf1\xad\x87\xfb\xec\xf3\x43\xb7\x22\x50\x3d\x62\x38\x54\x9e\x8a\x62\x0e\xe7\x2b\x5f\xb4\x80\x92\xa5\xee\xd3\x3e\x4a\x1e\x92\x85\x2e\x2e\xe4\x19\x00\x00\xff\xff\x02\x34\xec\x9d\xcd\x00\x00\x00")

func pkgTemplatesClusterSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesClusterSecretsYaml,
		"pkg/templates/cluster-secrets.yaml",
	)
}

func pkgTemplatesClusterSecretsYaml() (*asset, error) {
	bytes, err := pkgTemplatesClusterSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/cluster-secrets.yaml", size: 205, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xbd\x6e\xe3\x40\x0c\x84\xfb\x7d\x8a\x81\xaf\xb7\xe1\xc3\x55\xdb\x1d\xae\x38\xa7\x49\x8c\xfc\x35\x41\x0a\x4a\xa2\x25\x22\xda\xa5\xb2\xe4\x06\x36\x0c\xbd\x7b\x20\x35\x4e\x49\x90\xf3\x71\x66\x68\x92\x57\x2e\x26\x9a\x23\x36\x8d\x16\xa6\x51\xac\x6b\xb6\xa2\xbb\xaf\xfd\x26\x7c\x48\xee\x22\x8e\x6a\xde\x17\xb6\xcf\x31\x24\x76\xea\xc8\x29\x06\x20\x53\xe2\x88\xeb\x75\xfb\x6f\xac\xe6\x5c\xee\x29\xf1\x3c\x07\x9b\xb8\x5d\xd6\x89\xce\x7f\xc7\x51\x5b\x72\xee\x9e\x5c\x0b\xf5\x1c\xb1\xff\x2f\x8b\xb2\xa6\x86\xcb\xc3\xe9\x2e\x9b\x53\x6e\xd9\x22\x7e\x07\x80\xaa\x0f\x9c\x5d\x5a\xf2\xc5\x50\x00\x80\x41\xcd\xd7\x27\x07\x35\x9f\x67\xfc\xc2\x81\x0b\x43\x1c\xbd\xb2\xe1\xa2\xb5\xac\x37\xe0\x73\xc4\xe0\x3e\x59\xdc\xed\xd2\xa5\xd5\x34\x51\xbe\x6c\x45\x57\x4a\x51\xf5\x97\x32\x1e\xc9\x87\x15\xf6\x78\x9b\x57\xe6\xf3\x20\x06\x31\xf8\xc0\x30\x4a\x0c\xb2\x9f\x1a\x48\x86\xe4\x53\x21\xf3\x52\x5b\xaf\x85\x0d\xad\xe6\x93\xf4\xb5\xac\x5e\x03\xb0\xb4\xd2\x90\x2d\x59\xde\xde\x03\xc0\xb9\x97\xcc\xb7\x72\xf7\x7f\x36\xe1\x3b\x00\x00\xff\xff\x4e\xe4\xae\xba\x6e\x01\x00\x00")

func pkgTemplatesClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesClusterYaml,
		"pkg/templates/cluster.yaml",
	)
}

func pkgTemplatesClusterYaml() (*asset, error) {
	bytes, err := pkgTemplatesClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/cluster.yaml", size: 366, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesConfigTemplateIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\xb1\x6a\xc5\x30\x0c\x00\x77\x7d\x85\x78\x7b\xdb\x2f\xc8\x5a\x3a\x3e\x0a\x9d\x42\x30\xc6\x51\xe2\x14\x61\x05\x49\xe9\x62\xf4\xef\x05\x67\x28\x74\xbd\x83\xbb\x79\xa7\x46\x9a\x79\x01\x96\x3d\x31\xfd\x10\xe3\x84\x47\xdb\x04\x4e\x95\x6f\x2a\x9e\x36\xe1\x95\x14\x27\xec\xfd\xf5\x79\xb3\xf7\x81\x22\xa0\x8a\xf9\x6d\x3e\xc4\x3c\x02\x54\xc4\xd3\xa5\x9c\xce\xec\xf5\x36\x9f\x22\xfe\xa5\xfc\xcc\x5e\x23\x00\x66\x67\x5b\xa0\xe4\x54\x48\x3d\xb1\x94\xec\x87\x34\x9c\x00\x66\x33\x59\xc0\x4c\x92\x79\xd6\x91\x19\x85\x63\xc3\x46\x38\x0e\xf8\x78\x44\xfc\xed\xfe\xd7\xdf\xf2\xe5\xb5\xf7\x17\xa4\xb6\x46\xfc\x06\x00\x00\xff\xff\x80\x7a\x12\xac\xdc\x00\x00\x00")

func pkgTemplatesConfigTemplateIniBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesConfigTemplateIni,
		"pkg/templates/config-template.ini",
	)
}

func pkgTemplatesConfigTemplateIni() (*asset, error) {
	bytes, err := pkgTemplatesConfigTemplateIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/config-template.ini", size: 220, mode: os.FileMode(420), modTime: time.Unix(1681542732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesCredentialsTemplateIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x4e\x2c\x2d\xc9\x88\xe5\x2a\xc9\xcf\x4e\xcd\x53\xb0\xe5\x4a\xce\xc9\x4c\xcd\x2b\x89\xcf\x4c\x41\xb0\x8b\x53\x93\x8b\x52\x4b\x14\x6c\xb9\x00\x01\x00\x00\xff\xff\x64\xc8\xb4\x53\x2b\x00\x00\x00")

func pkgTemplatesCredentialsTemplateIniBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesCredentialsTemplateIni,
		"pkg/templates/credentials-template.ini",
	)
}

func pkgTemplatesCredentialsTemplateIni() (*asset, error) {
	bytes, err := pkgTemplatesCredentialsTemplateIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/credentials-template.ini", size: 43, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4f\x6b\xf3\x30\x0c\xc6\xef\xf9\x14\x7a\x7d\x6e\xde\xac\x3d\xed\x60\x07\xba\xc2\x60\x30\x76\x5a\x61\x57\xd5\xd6\x6a\x81\xff\x64\xb1\xdc\xac\xdf\x7e\x24\x19\x74\xf5\xc5\xe8\xa7\x47\x0f\x8f\xa4\xff\xb9\x6c\xe5\x3a\x10\x78\x89\xa1\x6f\xf4\xfc\x41\xc0\x74\x36\x8a\x92\x9a\x01\xa1\xeb\x1b\x00\x1d\x49\x10\xac\xc7\xb1\x90\x18\x75\x7c\x7f\x6e\x1f\xd5\xad\x91\x30\x92\x51\x17\xa6\x69\xc8\xa3\xa8\x06\x7e\x9f\xcd\x49\x28\x89\x51\x13\x3b\xf1\xc6\xd1\x85\x2d\xb5\x4b\xb1\x81\x5a\x68\x6c\x8b\xc5\x80\xa7\x40\x26\xe5\x0d\x70\x62\x61\x0c\x0b\x24\xb3\xfd\xff\xb0\x81\x88\xdf\x1c\x6b\xbc\x43\x9c\xee\xd1\x9f\x20\x5e\x64\x68\xe9\xab\xf2\xc5\xa8\x8f\xf6\xb8\x6f\x0f\x39\x0e\x28\x7c\x0a\xa4\x6e\x69\x98\x0c\xb9\x33\xad\x73\xc2\x12\xa8\x7f\xca\x23\x61\xe0\x02\x87\xd7\x17\xdd\xad\xac\xd1\xdd\xba\xbf\x3e\x65\x77\x5d\xc4\x7e\xdb\xef\xab\x78\x4a\xc2\x16\x85\x73\x82\x52\xad\xa5\x52\x3e\x6b\xd0\x9d\xdf\xae\xa2\x5d\xff\x96\x27\xb8\xe6\x0a\x16\x13\xd8\x90\x0b\x81\x78\x2e\x30\x71\x72\x79\xd2\x9d\xdf\xcd\xe6\xab\xab\xee\x96\xe3\xff\x04\x00\x00\xff\xff\x63\xce\x19\xf8\x8c\x01\x00\x00")

func pkgTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesIndexHtml,
		"pkg/templates/index.html",
	)
}

func pkgTemplatesIndexHtml() (*asset, error) {
	bytes, err := pkgTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/index.html", size: 396, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x4a\x43\x31\x10\x46\xf7\x79\x8a\xe1\x76\x7b\x05\xdd\x66\x57\x14\xa4\x0b\x7f\xc0\x9f\x7d\xcc\xfd\x7a\x1d\x9a\x66\xe2\xcc\xa4\xe0\xdb\x8b\x6d\x45\xa8\x76\x9b\x73\xce\x47\x98\xd4\xf8\x15\x6a\x2c\x35\xd2\xee\x2a\x6c\xb8\x4e\x91\x9e\x90\x15\x1e\xb6\xf0\x34\x25\x4f\x31\x10\xd5\xb4\x45\xa4\x37\x51\xa4\xc2\x76\x61\x7b\xc3\x82\x7f\x36\x44\x7a\x68\xe9\xa3\x23\xfc\xb8\xc2\x53\x7e\x54\xd9\xf1\x04\x5d\xdd\x44\x1a\x86\x93\xc7\xfb\xfd\xd8\x30\xd0\x82\x6e\x45\xe6\x82\x91\x96\xdd\xdf\x2f\x47\xba\xe3\xac\x62\xb2\xf6\x91\x96\xad\x15\x9c\x84\xd7\x85\x51\xfd\xdf\xcd\x03\x3a\xfc\xfc\x2c\x5e\x99\x75\xe8\x8b\x96\xa3\x91\xff\x46\xb9\x74\x73\xe8\xb3\x6c\x50\x7f\x01\x2d\x8e\x47\xa1\xb5\x28\xcd\xa8\xd0\xe4\x5c\x67\x6a\x62\x3e\x2b\x8c\xfc\x3b\xb0\xf0\x15\x00\x00\xff\xff\x65\xd1\x85\x43\x50\x01\x00\x00")

func pkgTemplatesSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesSecretsYaml,
		"pkg/templates/secrets.yaml",
	)
}

func pkgTemplatesSecretsYaml() (*asset, error) {
	bytes, err := pkgTemplatesSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/secrets.yaml", size: 336, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesTemplates_bindGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdb\x8e\x1b\xb9\x11\x7d\x56\x7f\x05\x77\x80\x5d\x48\xc1\xac\xd4\xf7\xcb\x00\x03\x24\xeb\x75\x10\x3f\xc4\x0b\xc4\xce\x43\x10\x06\x06\x9b\x4d\xca\x0d\x4b\xea\x49\x77\xcb\x5b\x63\xc3\xff\x1e\x1c\x16\x35\x37\x5d\x66\xed\xb1\x03\x3f\x78\x2c\x75\x93\xc5\xaa\x22\xeb\x9c\x53\xd4\x62\x21\x9e\x75\x8d\x11\x4b\xb3\x31\xbd\x1a\x4d\x23\x6c\xd7\x8b\x2b\xa5\xdf\xa9\xa5\x11\xa3\x59\x5f\xad\xd4\x68\x06\x51\x5f\x8b\x65\xf7\x73\xdd\x6e\x1a\x35\x2a\xf1\xeb\x6f\xe2\xe5\x6f\xaf\xc5\xf3\x5f\x5f\xbc\x9e\x8b\xe9\x9f\x6f\x26\xcf\x82\xc5\x42\x0c\xdd\xb6\xd7\x66\xb8\xc0\xe7\xab\x77\xcb\xc5\x8d\x91\x85\xd2\xba\xdb\x6e\xc6\x61\x7e\xad\xd6\xab\xfd\xd7\x7a\xb5\x1d\x46\xd3\xff\x3c\x18\xdd\x9b\xc7\x46\x1d\x7b\xdb\x6d\x6c\xbb\xfc\x79\xf7\x60\xde\x6e\xda\x03\x83\x7a\xd3\x98\xcd\xd8\xaa\xd5\xf0\xc8\xc8\x76\xd3\x18\x9a\xbf\x1d\x0f\x2d\x75\xda\xcd\x9b\x4f\x6f\x90\xb4\xf9\xb2\xdb\x1f\xf2\x5e\xad\xb6\xc6\xcf\xdf\xcb\x78\x10\xb4\xeb\xab\xae\x1f\xc5\x34\x98\x9c\xd5\xd7\xa3\x19\xce\x82\xc9\x99\xee\xd6\x57\xbd\x19\x86\xc5\xf2\x43\x7b\x85\x07\x76\x3d\xe2\xbf\xb6\xe3\xbf\x8b\xb6\xdb\x8e\xed\x0a\x5f\x3a\x37\xe1\x4a\x8d\x6f\x17\xb6\x5d\x19\x7c\xc0\x83\x61\xec\xdb\xcd\xd2\xbd\x1b\xdb\xb5\x39\x0b\x66\x41\x60\xb7\x1b\x2d\xfc\xde\xfe\xc3\xa8\x66\xea\x36\xf9\xdf\xff\xc1\xb2\xe7\x62\xa3\xd6\x46\xf0\xb4\x99\x98\xee\x9e\x9a\xbe\xef\xfa\x99\xf8\x18\x4c\x96\x1f\xdc\x37\x71\x71\x29\xe0\xd5\xfc\xa5\xf9\x1d\x46\x4c\x3f\x75\x6e\xe3\xfb\x2f\x5b\x6b\x4d\xef\xcc\xce\x66\xc1\xa4\xb5\x6e\xc2\x0f\x97\x62\xd3\xae\x60\x62\xd2\x9b\x71\xdb\x6f\xf0\xf5\x5c\xd8\xf5\x38\x7f\x0e\xeb\x76\x7a\x06\x43\xe2\xc7\xff\x5e\x88\x1f\xdf\x9f\xb1\x27\x6e\xad\x59\x30\xf9\x14\x04\x93\xf7\xaa\x17\xf5\xd6\x0a\x5e\x87\x17\x09\x26\x6f\xd8\x9d\x4b\xd1\x76\xf3\x67\xdd\xd5\xf5\xf4\xa7\x7a\x6b\xcf\xc5\xf2\xc3\x2c\x98\xe8\xd5\xf3\x9d\xa7\xf3\x67\xab\x6e\x30\xd3\x59\xf0\xb5\xfc\x81\x19\xb6\x7f\xc4\x90\xe9\x7b\xf6\xdb\x3f\xac\xb7\x76\xfe\x0b\x5c\x9f\xce\xce\x31\x22\xf8\x14\x04\xe3\xf5\x95\x11\x6a\x18\xcc\x88\x94\x6f\xf5\x08\x2b\x2e\x3e\xbf\x1f\xc1\xa4\xdd\xd8\x4e\x88\x6e\x98\xff\xb5\x5d\x99\x17\x1b\xdb\xdd\xcc\xf3\x5b\xb8\x7b\x7e\xc7\x82\xdb\x43\x21\xfc\x36\x06\x93\xa1\xfd\xe0\xbe\xb7\x9b\x31\x4f\x83\xc9\x1a\x10\x20\x6e\x8c\xfe\xbd\x6b\x8c\x7b\xf8\xba\x5d\x1b\x81\x63\x32\xc7\x27\xac\xb3\x58\x88\x97\xb0\xe5\x43\xc0\xc9\x72\x69\xe0\x33\x34\xb5\xed\x43\x27\x66\x6e\xfc\x74\xe6\x97\x86\x33\x37\x73\xe7\x6e\x26\x5b\x7d\x05\x8f\xee\x5a\x85\x8b\x27\xac\x62\xfc\x74\xc6\x01\xdc\x37\xea\x26\xb2\x51\x04\x72\xcf\x28\x02\x3d\x61\x14\xe3\xa7\xb3\xbb\x69\xb8\x6f\xda\x4d\x3f\x6e\xba\xb5\xd7\x2e\x5b\xa7\x57\x40\x2a\xa7\xb3\xdb\xb4\xee\x2d\x71\x27\xd7\x2f\x86\x5f\xdb\xfe\xde\x32\xbf\xbf\x35\xe3\x5b\xd3\x0b\x25\x9a\xb6\x37\x7a\xec\xfa\xeb\x13\xcb\xb9\xf9\xd3\x99\xa8\xbb\x6e\xb5\x1f\xca\x4f\xdd\x30\x47\x1c\x58\xe3\x87\x4b\x11\xee\xb6\xe2\x7a\xb8\xb7\x64\x3b\x88\xe1\x7a\x78\x2c\x77\xaf\xae\x07\xde\x0f\xd3\x5b\xa5\xcd\xc7\x4f\x77\xd6\xf3\x87\x1b\xf5\xfa\xe6\xea\xdd\xf2\xf5\x0e\xe4\xfe\xe2\x09\xe1\x5f\x6a\xbd\x12\x97\xfe\x84\x4f\xcf\x24\x45\x56\x52\x59\x4b\x0a\x4b\x49\x61\x78\xf8\x9f\xb5\x92\xf2\x54\x92\xae\x25\xd5\xb5\x24\xa5\x24\xe9\x44\x52\x12\x4a\x8a\x42\x49\x65\x2a\xc9\x44\x92\x32\x23\x29\xb5\x92\x92\x48\x92\x2d\x25\x35\xa9\x24\x9b\x4b\x8a\x23\x49\xaa\xe1\x79\x99\x96\x64\x95\xa4\x0a\x73\x2a\x49\x4d\x21\xa9\x89\x25\x45\x18\x17\x4b\xca\x14\x8f\xad\x22\x49\x26\x95\x54\x86\x6c\xaf\x30\x92\x6c\x21\xc9\x84\x92\xd2\x5a\x52\x5a\xf2\x98\x22\x96\x54\xe6\x92\x8c\x95\xa4\x0a\x5e\x2b\xd1\x92\x12\xbc\x2f\x24\xa9\x50\x92\xae\x24\xa9\x98\xd7\xd2\x5a\x52\x94\x4a\x4a\x13\x49\x16\xf3\x1b\x49\x51\x21\xc9\xa6\x1c\x67\x91\x49\x4a\x62\x49\xda\x4a\xaa\x42\x49\xb5\x96\xa4\x33\x49\x36\x93\x54\x97\x92\x72\x8c\x89\x24\xc5\x5a\x52\x85\xe7\x09\xbf\x4f\x2a\x49\x51\x23\x29\x43\x5e\x32\x49\x3a\xe6\xf7\xf0\x25\xc3\xdc\x58\x52\x98\xb3\xdf\x71\x2a\x29\xd7\x1c\x17\xd6\x69\x1a\x49\x39\xe2\x35\xfc\x0e\x6b\xc2\x7e\xdc\x48\x32\x8d\xa4\x3a\x95\x14\x61\x5e\x28\x29\xf3\xbe\xd5\xc8\xa9\xe6\xbc\x15\x78\x6e\x39\x86\xa8\x96\x54\x55\x1c\x43\x8d\xe7\x35\xdb\x8f\x91\x67\x23\xa9\xaa\x7d\xae\x7d\x1e\x90\x97\x34\x93\xd4\x24\x9c\xdb\x10\x71\x27\x92\x4a\x23\xa9\xc0\xfe\xd4\x92\xf2\x82\x73\x0b\x9b\x59\x28\xa9\x52\x92\x12\xc5\xcf\x10\x17\x62\x87\x6f\x79\xcd\xe7\x24\xac\x25\x59\xec\x29\x72\x10\xb3\x9d\xb0\xb8\x7f\x9e\xdc\x99\xca\x38\xc7\xa5\xe5\xf8\xe0\xdf\xed\xb9\x3b\xdb\xf1\xe5\xb1\x73\xec\x11\xfd\x10\x53\xee\x70\xff\x0e\xd3\x06\x93\xc9\xd1\x8a\x38\x0f\x26\x93\xb3\x13\x0a\xea\xec\x3c\x98\xcc\x50\x57\x27\xfd\x81\x2b\x7f\x72\x8c\x72\xd7\x15\x47\x29\x37\xbc\xfd\x48\x2c\x8f\x31\xe4\x0d\xb1\x39\x6a\xba\xb8\x7c\x08\x0e\x1f\x81\xf3\x17\xe2\x74\x2c\x0e\xf0\x2f\x44\x1c\xc7\xe7\x0e\x6a\x2e\xee\xc2\xf0\x34\x8d\xc3\x99\x7b\x0e\x70\xbc\x60\xf0\xfc\xe7\xa6\xa5\x69\x94\x97\x51\x94\x14\x79\x99\x9e\x8b\x70\xf6\x29\x98\x28\x38\xf0\x93\x0b\xf8\xa3\x8b\xf2\x42\xf8\x60\xe1\xdd\x85\xfb\xfb\xe9\x66\x2f\xd4\xf9\x51\x70\x7a\xc6\x42\xf3\x15\xcb\xbc\x27\x41\x14\x8e\x2d\x4a\x23\x54\x5c\x82\xa9\x87\xa8\x14\xe5\x5d\xf3\xbf\x52\x49\x8a\x51\x92\x8d\xa4\x32\xe6\x12\x43\xd9\xc7\x77\x60\x28\x2f\x19\x4a\x1a\x5f\xf2\x49\xce\xa5\x1d\x69\x49\x29\x8e\xbb\x91\x64\x0a\x9e\x9b\xe6\x92\xc2\x8a\xc7\xc3\x0f\xbc\x43\x89\xa8\x52\x52\x99\xf9\x12\x46\xb9\x17\x0c\x9b\x28\x57\xf8\x97\x15\xbe\x5c\x00\x1b\x0d\x97\x6f\x91\x4a\x6a\x2c\x43\x0d\x4a\x4c\x03\x76\x15\x97\x67\x98\x71\x39\x01\x2a\x94\x61\xdb\x80\x22\xc0\x8f\xce\xb9\x7c\xa2\x88\xcb\x39\x37\x0c\xc9\x79\xc5\x3e\x03\xfa\x1c\x74\xe7\xbc\x2e\xe0\x2f\x31\x3c\x1f\xb9\xc5\x38\x40\xaf\xf1\x25\x9f\x01\x22\x0b\x86\x70\xf8\x5b\x56\x1c\x27\x60\x26\x56\x0c\xbd\x16\x10\xa8\x39\x66\x97\xf7\x84\x73\xa0\x23\xf6\x17\xb0\x60\x3d\xf4\x97\x05\xe7\xde\x68\x86\x4c\xac\x5f\x17\x1e\xf2\x01\xf1\x80\xc0\x98\x61\x1b\x6b\x57\x86\xf7\x09\xcf\x42\x9f\xeb\xb8\xe6\xf5\x6b\x4f\x0b\xc8\x85\xca\x18\x36\x1b\x1f\x4f\xaa\x24\x45\x86\xdf\x21\x3f\xd8\x0b\xb7\x57\x80\xc6\x6a\x1f\x82\x42\xac\x99\xb2\x5f\x55\x23\x49\x37\x8f\x42\xd0\xfe\x69\x7d\x1a\x10\xed\xdb\x3b\x00\x47\x87\x3a\xb6\xe3\xa8\xb4\x6f\xf2\x73\xb1\xe9\x68\x90\xdf\x06\xa1\x0e\x87\xb7\x03\xaa\x30\xfb\xbe\x80\xea\x8b\x11\x2a\xd5\x5e\x54\x34\xbe\x42\x13\x46\xa8\x50\xb3\x88\x42\x85\x40\x90\xe0\xe4\x97\xa8\x1c\xcb\x55\x82\x4a\x06\x72\x40\x48\xa0\x3a\x21\x34\x80\x00\xa8\x16\x90\x30\x10\xa9\xd4\x5c\x91\x10\x1f\xa9\x47\x40\x54\x03\x08\x3e\xf6\xe8\xd6\x28\xae\x18\x90\x36\x2a\x02\x82\x04\xc8\x86\xf5\xe1\x53\x51\x33\x91\x3b\x1b\x86\xed\xc2\x5f\x54\x2c\x90\x22\xcf\x19\x19\x51\x5d\x40\x11\x57\x5d\x39\xa3\x5d\x9c\xb0\xad\xb2\x61\x14\x75\x48\xe3\x45\x0a\x84\x41\x9d\xb3\x2f\x0e\x85\x50\x7d\x0d\xcf\x2d\x34\x8b\x22\x27\x7e\x62\x46\x92\x5c\x79\x34\x2b\x78\x9e\xf6\xa2\x12\xe2\xa8\x80\xd8\x03\x32\x02\xa1\x2b\x8e\xc1\x09\x23\x08\x18\xcc\x87\xad\x9a\x11\x1d\xf9\x04\x7a\xc3\x07\x93\xb3\xf8\x74\xeb\x78\x64\x82\x38\x83\x30\x81\x28\x02\xe2\x02\x85\x9b\x9c\xd1\x4e\x03\x1d\xad\x24\x5d\x70\x1c\x10\x52\x10\x9b\x98\x0f\x74\x82\x2d\x27\x74\x32\x46\xd8\x7a\x87\xfe\xfe\x2c\x20\xc7\xc8\x01\xc4\x29\x84\x33\xf6\xcf\x78\xe6\xc0\x7a\xf0\x17\x67\xa0\xa9\x38\x6e\x08\x5c\xf8\x02\x64\x83\x50\x76\x42\x4c\xb3\x4f\x40\x66\x08\x2a\x20\x7d\xe6\xcf\x13\xc6\x61\x9f\x81\x58\x40\x77\x08\x3c\xcc\xc7\xde\x55\x96\x45\x1b\xce\x03\x58\x10\x67\x09\xbe\xa6\x9e\xc1\xb0\xd7\xee\x0c\x44\x7e\x4f\x32\xce\x51\xe2\x05\x76\x91\x30\xf3\xe0\x33\x50\x35\x03\x2b\x68\x66\xb2\xc6\xa3\x6e\x93\x31\x72\x22\x37\xb5\x61\x41\x0b\xe6\x71\xec\xa2\xf8\x39\x72\x53\x79\xe1\x08\x54\x86\x10\x07\x13\x44\x19\x37\x06\x45\xe9\x73\x51\xf0\xfe\xe0\x9c\x61\x2f\xdd\xb9\xf4\x4d\x84\x0e\xb9\xd1\x80\x4d\x77\x4e\x63\x8e\x2f\x52\x7c\x6e\x9c\xf8\x4f\x39\x9f\x8e\x81\x13\x16\xc9\x99\x3f\x67\x60\x01\x30\x2c\x58\x08\x6b\x40\xdc\x82\x69\x77\x31\xa3\x69\x09\x13\x16\xcb\x60\x16\xc4\x87\x33\x0f\xf1\xed\xe2\x36\x5e\x98\x26\xec\x4b\x5d\x71\x4c\x68\x24\x50\x9b\x38\x13\x68\x4c\x0a\xaf\x12\x90\xd3\xa4\xde\x67\x9a\xd4\xb3\x10\xea\xb6\x56\xbc\xf7\x61\xf4\x47\x98\xe6\xab\x51\xcc\x69\x6e\xf9\x63\x9c\xf2\x04\x32\xf9\x7f\xb1\xc8\x7d\xf6\x48\xf2\xfc\x7b\x61\x0f\x77\x63\xba\xfb\xfa\x62\xd3\x7e\x11\x87\x00\x77\x80\xb1\xc0\x1b\xe0\xa4\x6b\x3e\x3d\x87\x60\x4c\x51\x78\x0e\xc9\xb8\xbe\x80\xe9\xe0\x0c\xe0\x12\x30\x33\xf3\xcd\x1b\xea\x1a\x1c\x01\xd5\x93\xc6\x6c\x43\x7b\xcc\x06\x8e\xa2\x39\x84\xd2\x84\xea\x04\x0f\x00\xbb\xa0\xc6\x50\x3b\x68\xb6\xf1\x1c\x18\x13\x97\xac\x5a\x9d\x9a\x4e\x18\xdf\xd1\xf0\x39\x5e\xf2\xdc\xe0\x1a\xc0\x48\x52\x95\xb3\xd2\x73\xb5\xdd\xb0\x32\x07\x07\x96\x3b\xb5\x89\xf8\x53\xae\x15\x34\xcf\xf9\x4e\x6d\x9a\xdb\xda\xc2\x73\xf8\x06\xbc\x73\x6a\xb2\x61\x9c\xc1\x1a\x50\xa0\xa8\x45\xe0\x1d\x30\x15\xcd\x3f\xb8\xd4\xc2\xf7\x86\x63\x06\xae\x39\xdc\x8f\x59\x69\xe2\x3b\xd4\x23\x30\x0d\x78\x0b\xdc\x77\x76\x33\x5e\x13\x58\x03\x5b\xd6\xf0\x18\x87\xa9\x1e\x37\xc0\x79\xc8\xb9\xe3\xc5\xc2\x63\x4e\xe8\xf1\x28\x65\x7c\x4a\xfc\x5e\x55\x5e\x65\x02\xff\x80\x9b\x95\xbe\x9d\x9b\x24\x8c\x35\xc0\x17\xa7\x11\x7c\xd3\x0c\x2e\x82\xd2\x86\x72\xc5\x7e\xe6\x09\xf3\x08\xf2\x0a\xee\x87\x32\x06\x46\x62\x9f\x5d\x87\xe3\x31\x1a\xbe\xba\x8b\x15\xcb\xbc\x61\x32\xc6\x3b\xe4\x06\x9c\xaa\x52\xe6\x55\xd8\xc1\x1c\xe0\xed\x43\xbc\x02\xbf\x14\x8a\x9b\x78\xe0\x64\xa3\x1f\x57\xc6\x0f\x0f\xf8\x13\x51\xeb\xa1\xb9\x43\xd8\xb5\xff\x2b\xc4\x09\x08\x7b\x68\xf0\xb3\x81\xec\x48\x80\xdf\x08\xce\x0e\xc5\x76\xd3\xbc\x87\x9f\x8d\x6a\x59\x1a\x17\x49\xfc\xd5\x51\xed\xf6\x27\x9e\xa7\x42\x1b\x4a\x15\xa5\xbf\xbb\xfb\x72\x72\xa1\xe4\xe3\x0b\x18\xc0\x77\xed\xa9\x54\xfb\xbb\x36\xd0\x36\xde\x43\x1e\x68\x2f\x31\x50\x42\x78\x8f\x86\xb1\xdc\xcd\xd1\x2c\x97\x30\xbe\xf4\xf2\xcb\xdd\x73\xd5\x2c\x17\xd2\xda\x43\x9e\x66\x8a\x77\x7e\x45\x07\xee\xac\x52\x86\xd1\x7a\x27\x39\xea\xc7\xcb\xe2\x60\x86\x9e\x58\x1b\x07\x6d\x1e\x2a\x90\x23\xbf\xc0\x9d\xa8\x92\x83\xa6\x3f\xbb\x54\x4e\x05\xfd\x8d\xea\xe5\x68\xa8\xbe\x68\xd2\xe4\x3b\x51\x02\x2f\x36\x8d\xa1\xbf\x8d\x5f\xd8\x45\xba\xfb\x91\x90\xaf\xda\xd1\x59\xd9\xe4\x56\x01\x68\x7f\x15\x0e\xc6\xc3\x71\x06\x82\x17\xbe\xdb\x84\x8a\x75\x2a\xdf\x5f\x2b\xe7\x21\x77\x0c\xb5\xbf\x2b\xcb\xbd\xd2\x46\x87\x05\x95\x00\xf6\x87\x32\x87\xd2\x07\x13\xe5\xbe\x2b\xdd\x95\x01\x58\x0d\xac\xe0\xd8\xc1\x72\x07\x13\xfb\x7b\x16\x28\x02\x30\x28\xd4\x89\xd9\x75\xa9\x05\x77\x35\xa5\x65\x06\x82\x1d\x94\x1a\x4a\x0e\x25\x0c\x55\x02\x45\x00\x36\x43\xd9\xaa\x88\x15\x80\xf5\xcc\xe6\xba\x9d\x90\x6d\xbb\x4e\x53\x31\x53\x42\x61\xa0\x54\x31\x1e\x9d\x5f\xe4\x4b\x12\x5d\x32\x94\x0b\x6c\xc2\x47\x74\x72\x8e\x89\x43\xbe\x6e\x46\x87\x88\xee\x13\xca\x1d\xf9\x41\xfe\x11\xeb\xee\xe7\x87\xc4\xdf\x31\x41\x11\x39\xd6\xcc\xf9\x9e\x0c\xe5\xaf\x12\xbe\xdf\x03\x73\x22\x6e\xa8\x04\xed\xd7\x8b\xbd\xff\x6e\x5e\xc2\xdd\x80\x8d\xfe\x17\x00\x00\xff\xff\xe6\x2f\xd1\x72\x00\x20\x00\x00")

func pkgTemplatesTemplates_bindGoBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesTemplates_bindGo,
		"pkg/templates/templates_bind.go",
	)
}

func pkgTemplatesTemplates_bindGo() (*asset, error) {
	bytes, err := pkgTemplatesTemplates_bindGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/templates_bind.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1682444009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x41\x6a\xeb\x40\x10\x44\xf7\x3e\x45\x81\x17\xff\x07\x12\x6b\xaf\x13\x64\x15\x8c\x43\x0e\x30\x9a\xb4\xdc\x03\xd2\xb4\xd2\x5d\x83\x11\xc6\x77\x0f\x96\x31\x59\xd6\x7b\xf0\x4a\x2d\xd8\xe3\x7a\x3d\xbc\x5b\xf0\x76\xc3\x1e\xc7\x46\xac\xd6\x1c\x77\x05\x15\x17\xfc\x3f\xc9\x4f\x2b\x2e\xdf\x2f\x50\x72\x89\xbe\xeb\xe6\x35\xdb\xbc\xa4\xba\x1e\xb2\xcd\x3b\x37\xe3\x97\x4f\xc7\x44\xdd\x62\xa7\xbf\xbd\x35\x3f\xdb\x80\x25\x51\x5f\x11\x86\x42\x5c\xac\xfe\x23\xb2\xd5\x71\x2a\x99\xb8\x14\xea\xe3\xd3\xa8\xe2\x28\xf5\xec\x12\x01\xb7\x46\x09\x74\x83\xb9\xa4\xa9\xc4\x2e\x24\xbb\xf0\x23\xcd\xd2\xe3\x09\xdf\x1e\x30\xb0\xc7\x5d\xc0\x46\x50\x05\x4f\x4a\x4d\xc4\x20\x93\xd5\x73\x80\xb6\xb9\x52\x47\x4f\x41\x6f\x99\xcd\x25\x7e\x03\x00\x00\xff\xff\xd6\xb1\x4d\x61\x04\x01\x00\x00")

func pkgTemplatesValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesValuesYaml,
		"pkg/templates/values.yaml",
	)
}

func pkgTemplatesValuesYaml() (*asset, error) {
	bytes, err := pkgTemplatesValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/values.yaml", size: 260, mode: os.FileMode(420), modTime: time.Unix(1681360694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/templates/accounts.yaml":            pkgTemplatesAccountsYaml,
	"pkg/templates/cluster-secrets.yaml":     pkgTemplatesClusterSecretsYaml,
	"pkg/templates/cluster.yaml":             pkgTemplatesClusterYaml,
	"pkg/templates/config-template.ini":      pkgTemplatesConfigTemplateIni,
	"pkg/templates/credentials-template.ini": pkgTemplatesCredentialsTemplateIni,
	"pkg/templates/index.html":               pkgTemplatesIndexHtml,
	"pkg/templates/secrets.yaml":             pkgTemplatesSecretsYaml,
	"pkg/templates/templates_bind.go":        pkgTemplatesTemplates_bindGo,
	"pkg/templates/values.yaml":              pkgTemplatesValuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"accounts.yaml":            &bintree{pkgTemplatesAccountsYaml, map[string]*bintree{}},
			"cluster-secrets.yaml":     &bintree{pkgTemplatesClusterSecretsYaml, map[string]*bintree{}},
			"cluster.yaml":             &bintree{pkgTemplatesClusterYaml, map[string]*bintree{}},
			"config-template.ini":      &bintree{pkgTemplatesConfigTemplateIni, map[string]*bintree{}},
			"credentials-template.ini": &bintree{pkgTemplatesCredentialsTemplateIni, map[string]*bintree{}},
			"index.html":               &bintree{pkgTemplatesIndexHtml, map[string]*bintree{}},
			"secrets.yaml":             &bintree{pkgTemplatesSecretsYaml, map[string]*bintree{}},
			"templates_bind.go":        &bintree{pkgTemplatesTemplates_bindGo, map[string]*bintree{}},
			"values.yaml":              &bintree{pkgTemplatesValuesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
