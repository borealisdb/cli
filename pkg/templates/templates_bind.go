// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// pkg/templates/accounts.yaml
// pkg/templates/cluster-secrets.yaml
// pkg/templates/cluster.yaml
// pkg/templates/config-template.ini
// pkg/templates/credentials-template.ini
// pkg/templates/index.html
// pkg/templates/secrets.yaml
// pkg/templates/templates_bind.go
// pkg/templates/values.yaml
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgTemplatesAccountsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\xbb\xaa\xc3\x30\x10\x84\xe1\x5e\x4f\x31\xf8\xd4\xf6\x21\xad\xaa\x5c\xfa\x94\xe9\xd7\xd2\x16\x22\x5a\xad\x91\xe4\x80\x31\x7e\xf7\xe0\x4b\x48\x91\x72\x86\xef\xa7\x21\x3c\x38\x97\xa0\xc9\xa2\xd7\xcc\x14\x43\xf1\x7d\x17\xf4\xff\x75\x32\xcf\x90\xbc\xc5\xf5\xb8\x6f\x71\x2c\x95\xf3\xc5\x39\x1d\x53\x35\xc2\x95\x3c\x55\xb2\x06\x48\x24\x6c\x31\xcf\xdd\x61\xee\x24\xbc\x2c\x2d\xed\xb4\x18\x20\x52\xcf\xb1\xac\x16\x70\x5f\xf4\x1b\x99\x32\xb0\x5b\xdd\x27\xde\x9b\x16\x2c\x14\xa2\x45\xd3\xe0\x0f\x93\x8e\x79\xdb\x67\xa7\x32\x50\x9a\x3a\xa7\xb2\x39\x20\x6b\x64\x0b\xf2\x12\x92\x79\x07\x00\x00\xff\xff\x65\x90\x8f\x18\xde\x00\x00\x00")

func pkgTemplatesAccountsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesAccountsYaml,
		"pkg/templates/accounts.yaml",
	)
}

func pkgTemplatesAccountsYaml() (*asset, error) {
	bytes, err := pkgTemplatesAccountsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/accounts.yaml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesClusterSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\xc2\x40\x10\x44\xfb\xfb\x8a\x25\xbd\x82\xed\x75\x22\x16\x22\x68\x21\xd8\x6f\x36\x53\x1c\x49\x2e\xe7\xed\x46\x09\x21\xff\x2e\x9a\xa8\x85\xed\xbc\x37\xc3\x70\x0a\x57\x64\x0d\x5d\xf4\x74\xdf\xb8\x3a\xc4\xca\xd3\x05\x92\x61\xae\x85\x71\xc5\xc6\xde\x11\x45\x6e\xe1\x69\x1c\xd7\xbb\xa6\x57\x43\x3e\x71\x8b\x69\x5a\xe9\xdb\x54\x47\xd4\x70\x89\x46\x5f\x2a\x91\xfc\x9c\xff\x8e\xb3\x21\xc1\xd3\x39\xf1\xad\x87\xfb\xec\xf3\x43\xb7\x22\x50\x3d\x62\x38\x54\x9e\x8a\x62\x0e\xe7\x2b\x5f\xb4\x80\x92\xa5\xee\xd3\x3e\x4a\x1e\x92\x85\x2e\x2e\xe4\x19\x00\x00\xff\xff\x02\x34\xec\x9d\xcd\x00\x00\x00")

func pkgTemplatesClusterSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesClusterSecretsYaml,
		"pkg/templates/cluster-secrets.yaml",
	)
}

func pkgTemplatesClusterSecretsYaml() (*asset, error) {
	bytes, err := pkgTemplatesClusterSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/cluster-secrets.yaml", size: 205, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xbd\x6e\xe3\x40\x0c\x84\xfb\x7d\x8a\x81\xaf\xb7\xe1\xc3\x55\xdb\x1d\xae\x38\xa7\x49\x8c\xfc\x35\x41\x0a\x4a\xa2\x25\x22\xda\xa5\xb2\xe4\x06\x36\x0c\xbd\x7b\x20\x35\x4e\x49\x90\xf3\x71\x66\x68\x92\x57\x2e\x26\x9a\x23\x36\x8d\x16\xa6\x51\xac\x6b\xb6\xa2\xbb\xaf\xfd\x26\x7c\x48\xee\x22\x8e\x6a\xde\x17\xb6\xcf\x31\x24\x76\xea\xc8\x29\x06\x20\x53\xe2\x88\xeb\x75\xfb\x6f\xac\xe6\x5c\xee\x29\xf1\x3c\x07\x9b\xb8\x5d\xd6\x89\xce\x7f\xc7\x51\x5b\x72\xee\x9e\x5c\x0b\xf5\x1c\xb1\xff\x2f\x8b\xb2\xa6\x86\xcb\xc3\xe9\x2e\x9b\x53\x6e\xd9\x22\x7e\x07\x80\xaa\x0f\x9c\x5d\x5a\xf2\xc5\x50\x00\x80\x41\xcd\xd7\x27\x07\x35\x9f\x67\xfc\xc2\x81\x0b\x43\x1c\xbd\xb2\xe1\xa2\xb5\xac\x37\xe0\x73\xc4\xe0\x3e\x59\xdc\xed\xd2\xa5\xd5\x34\x51\xbe\x6c\x45\x57\x4a\x51\xf5\x97\x32\x1e\xc9\x87\x15\xf6\x78\x9b\x57\xe6\xf3\x20\x06\x31\xf8\xc0\x30\x4a\x0c\xb2\x9f\x1a\x48\x86\xe4\x53\x21\xf3\x52\x5b\xaf\x85\x0d\xad\xe6\x93\xf4\xb5\xac\x5e\x03\xb0\xb4\xd2\x90\x2d\x59\xde\xde\x03\xc0\xb9\x97\xcc\xb7\x72\xf7\x7f\x36\xe1\x3b\x00\x00\xff\xff\x4e\xe4\xae\xba\x6e\x01\x00\x00")

func pkgTemplatesClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesClusterYaml,
		"pkg/templates/cluster.yaml",
	)
}

func pkgTemplatesClusterYaml() (*asset, error) {
	bytes, err := pkgTemplatesClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/cluster.yaml", size: 366, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesConfigTemplateIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x31\x6a\xc4\x40\x0c\x45\x7b\x9d\x62\xd8\x3e\xce\x09\xdc\x85\x10\xd8\x66\x09\xa4\x32\x66\xd0\xda\xf2\xda\x89\x18\x2d\x92\xbc\x8d\xd1\xdd\x43\x66\x20\x81\xb4\xff\x7d\xde\x1b\x6e\x54\x48\x91\x47\x60\xb9\x65\xa6\x07\x71\xea\xd3\x56\x16\x81\xbb\xca\x27\x4d\x9e\x17\xe1\x99\x34\xf5\xe9\x38\xba\x4b\xdb\x5e\xeb\x14\x01\xab\x98\x37\xf2\x26\xe6\x11\xa0\x22\x9e\x77\xe5\x7c\x47\x5f\x1b\x79\x17\xf1\x0f\xe5\x0b\xfa\x1a\x01\x30\x38\xdb\x08\x13\xe6\x89\xd4\x33\xcb\x84\xbe\x49\x49\x3d\xc0\x60\x26\x23\x98\x49\x36\x47\xad\x9a\x6a\xd8\x96\x54\x28\xd5\x42\x3a\x9d\x22\xfe\x72\xff\xed\xcf\xb8\xfb\x7a\x1c\x4f\x89\xca\x5c\x5b\x5f\xfb\x95\xb4\x90\x93\x8d\x30\x6f\x86\x57\xa6\xfc\xb3\x3d\xb0\xa9\xbb\xf3\xef\xa1\x7b\x69\xfc\xdc\x70\xc4\x77\x00\x00\x00\xff\xff\x4b\xc1\xf4\x15\x1b\x01\x00\x00")

func pkgTemplatesConfigTemplateIniBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesConfigTemplateIni,
		"pkg/templates/config-template.ini",
	)
}

func pkgTemplatesConfigTemplateIni() (*asset, error) {
	bytes, err := pkgTemplatesConfigTemplateIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/config-template.ini", size: 283, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesCredentialsTemplateIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x4e\x2c\x2d\xc9\x88\xe5\x2a\xc9\xcf\x4e\xcd\x53\xb0\xe5\x4a\xce\xc9\x4c\xcd\x2b\x89\xcf\x4c\x41\xb0\x8b\x53\x93\x8b\x52\x4b\x14\x6c\xb9\x00\x01\x00\x00\xff\xff\x64\xc8\xb4\x53\x2b\x00\x00\x00")

func pkgTemplatesCredentialsTemplateIniBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesCredentialsTemplateIni,
		"pkg/templates/credentials-template.ini",
	)
}

func pkgTemplatesCredentialsTemplateIni() (*asset, error) {
	bytes, err := pkgTemplatesCredentialsTemplateIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/credentials-template.ini", size: 43, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4f\x6b\xf3\x30\x0c\xc6\xef\xf9\x14\x7a\x7d\x6e\xde\xac\x3d\xed\x60\x07\xba\xc2\x60\x30\x76\x5a\x61\x57\xd5\xd6\x6a\x81\xff\x64\xb1\xdc\xac\xdf\x7e\x24\x19\x74\xf5\xc5\xe8\xa7\x47\x0f\x8f\xa4\xff\xb9\x6c\xe5\x3a\x10\x78\x89\xa1\x6f\xf4\xfc\x41\xc0\x74\x36\x8a\x92\x9a\x01\xa1\xeb\x1b\x00\x1d\x49\x10\xac\xc7\xb1\x90\x18\x75\x7c\x7f\x6e\x1f\xd5\xad\x91\x30\x92\x51\x17\xa6\x69\xc8\xa3\xa8\x06\x7e\x9f\xcd\x49\x28\x89\x51\x13\x3b\xf1\xc6\xd1\x85\x2d\xb5\x4b\xb1\x81\x5a\x68\x6c\x8b\xc5\x80\xa7\x40\x26\xe5\x0d\x70\x62\x61\x0c\x0b\x24\xb3\xfd\xff\xb0\x81\x88\xdf\x1c\x6b\xbc\x43\x9c\xee\xd1\x9f\x20\x5e\x64\x68\xe9\xab\xf2\xc5\xa8\x8f\xf6\xb8\x6f\x0f\x39\x0e\x28\x7c\x0a\xa4\x6e\x69\x98\x0c\xb9\x33\xad\x73\xc2\x12\xa8\x7f\xca\x23\x61\xe0\x02\x87\xd7\x17\xdd\xad\xac\xd1\xdd\xba\xbf\x3e\x65\x77\x5d\xc4\x7e\xdb\xef\xab\x78\x4a\xc2\x16\x85\x73\x82\x52\xad\xa5\x52\x3e\x6b\xd0\x9d\xdf\xae\xa2\x5d\xff\x96\x27\xb8\xe6\x0a\x16\x13\xd8\x90\x0b\x81\x78\x2e\x30\x71\x72\x79\xd2\x9d\xdf\xcd\xe6\xab\xab\xee\x96\xe3\xff\x04\x00\x00\xff\xff\x63\xce\x19\xf8\x8c\x01\x00\x00")

func pkgTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesIndexHtml,
		"pkg/templates/index.html",
	)
}

func pkgTemplatesIndexHtml() (*asset, error) {
	bytes, err := pkgTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/index.html", size: 396, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x4a\x43\x31\x10\x46\xf7\x79\x8a\xe1\x76\x7b\x05\xdd\x66\x57\x14\xa4\x0b\x7f\xc0\x9f\x7d\xcc\xfd\x7a\x1d\x9a\x66\xe2\xcc\xa4\xe0\xdb\x8b\x6d\x45\xa8\x76\x9b\x73\xce\x47\x98\xd4\xf8\x15\x6a\x2c\x35\xd2\xee\x2a\x6c\xb8\x4e\x91\x9e\x90\x15\x1e\xb6\xf0\x34\x25\x4f\x31\x10\xd5\xb4\x45\xa4\x37\x51\xa4\xc2\x76\x61\x7b\xc3\x82\x7f\x36\x44\x7a\x68\xe9\xa3\x23\xfc\xb8\xc2\x53\x7e\x54\xd9\xf1\x04\x5d\xdd\x44\x1a\x86\x93\xc7\xfb\xfd\xd8\x30\xd0\x82\x6e\x45\xe6\x82\x91\x96\xdd\xdf\x2f\x47\xba\xe3\xac\x62\xb2\xf6\x91\x96\xad\x15\x9c\x84\xd7\x85\x51\xfd\xdf\xcd\x03\x3a\xfc\xfc\x2c\x5e\x99\x75\xe8\x8b\x96\xa3\x91\xff\x46\xb9\x74\x73\xe8\xb3\x6c\x50\x7f\x01\x2d\x8e\x47\xa1\xb5\x28\xcd\xa8\xd0\xe4\x5c\x67\x6a\x62\x3e\x2b\x8c\xfc\x3b\xb0\xf0\x15\x00\x00\xff\xff\x65\xd1\x85\x43\x50\x01\x00\x00")

func pkgTemplatesSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesSecretsYaml,
		"pkg/templates/secrets.yaml",
	)
}

func pkgTemplatesSecretsYaml() (*asset, error) {
	bytes, err := pkgTemplatesSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/secrets.yaml", size: 336, mode: os.FileMode(420), modTime: time.Unix(1681137684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesTemplates_bindGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdb\x6e\x1c\xb9\x11\x7d\x9e\xfe\x0a\xae\x80\x5d\xcc\x04\xda\x51\xdf\x2f\x02\x04\x24\x6b\x3b\x88\x1f\xe2\x05\x62\xe7\x21\x08\x03\x83\x64\x93\x72\xc3\xa3\x69\xa5\xbb\xc7\x4b\xd9\xf0\xbf\x07\x87\x55\x23\x4b\x9e\x8b\xd6\xd6\x3a\xf0\x83\x6c\x4d\x0f\x59\xac\x2a\x56\x9d\x73\xaa\x75\x76\x26\x9e\xf4\xad\x15\x97\x76\x6d\x07\x35\xd9\x56\xb8\x7e\x10\xd7\xca\xbc\x55\x97\x56\x4c\xf6\xea\x7a\xa5\x26\x3b\x0a\x7d\x23\x2e\xfb\x9f\x75\xb7\x6e\xd5\xa4\xc4\xd3\x5f\xc5\x8b\x5f\x5f\x89\x67\x4f\x9f\xbf\x5a\x8a\xf9\x9f\x6f\x37\x2f\xa2\xb3\x33\x31\xf6\x9b\xc1\xd8\xf1\x1c\xbf\x5f\xbf\xbd\x3c\xbb\x35\x72\xa6\x8c\xe9\x37\xeb\x69\x5c\xde\xa8\xab\xd5\xee\xd7\x66\xb5\x19\x27\x3b\xfc\x3c\x5a\x33\xd8\x87\x56\x1d\xfa\xb6\x5f\xbb\xee\xf2\xe7\xed\x83\x65\xb7\xee\xf6\x2c\x1a\x6c\x6b\xd7\x53\xa7\x56\xe3\x03\x2b\xbb\x75\x6b\xfd\xf2\xcd\xb4\xef\xa8\xe3\x6e\xde\xfe\xf6\x1a\x49\x5b\x5e\xf6\xbb\x4b\xde\xa9\xd5\xc6\xf2\xfe\x9d\x8c\x47\x51\x77\x75\xdd\x0f\x93\x98\x47\xb3\x13\x7d\x33\xd9\xf1\x24\x9a\x9d\x98\xfe\xea\x7a\xb0\xe3\x78\x76\xf9\xbe\xbb\xc6\x03\x77\x35\xe1\xbf\xae\xa7\x7f\xcf\xba\x7e\x33\x75\x2b\x7c\xe8\xc3\x86\x6b\x35\xbd\x39\x73\xdd\xca\xe2\x17\x3c\x18\xa7\xa1\x5b\x5f\x86\xef\xa6\xee\xca\x9e\x44\x8b\x28\x72\x9b\xb5\x11\x7c\xb7\xff\xb0\xaa\x9d\x87\x4b\xfe\xf7\x7f\x70\xec\xa9\x58\xab\x2b\x2b\x68\xdb\x42\xcc\xb7\x4f\xed\x30\xf4\xc3\x42\x7c\x88\x66\x97\xef\xc3\x27\x71\x7e\x21\xe0\xd5\xf2\x85\xfd\x0d\x46\xec\x30\x0f\x6e\xe3\xf3\x2f\x1b\xe7\xec\x10\xcc\x2e\x16\xd1\xac\x73\x61\xc3\x0f\x17\x62\xdd\xad\x60\x62\x36\xd8\x69\x33\xac\xf1\xf1\x54\xb8\xab\x69\xf9\x0c\xd6\xdd\xfc\x04\x86\xc4\x8f\xff\x3d\x17\x3f\xbe\x3b\x21\x4f\xc2\x59\x8b\x68\xf6\x31\x8a\x66\xef\xd4\x20\xf4\xc6\x09\x3a\x87\x0e\x89\x66\xaf\xc9\x9d\x0b\xd1\xf5\xcb\x27\xfd\xf5\xcd\xfc\x27\xbd\x71\xa7\xe2\xf2\xfd\x22\x9a\x99\xd5\xb3\xad\xa7\xcb\x27\xab\x7e\xb4\xf3\x45\xf4\x47\xf9\x03\x33\x64\xff\x80\x21\x3b\x0c\xe4\x37\x3f\xd4\x1b\xb7\xfc\x05\xae\xcf\x17\xa7\x58\x11\x7d\x8c\xa2\xe9\xe6\xda\x0a\x35\x8e\x76\x42\xca\x37\x66\x82\x95\x10\x1f\xdf\x47\x34\xeb\xd6\xae\x17\xa2\x1f\x97\x7f\xed\x56\xf6\xf9\xda\xf5\xb7\xfb\xf8\x0a\xb7\xcf\xef\x58\x08\x77\x28\x04\x5f\x63\x34\x1b\xbb\xf7\xe1\x73\xb7\x9e\xca\x3c\x9a\x5d\x01\x02\xc4\xad\xd1\xbf\xf7\xad\x0d\x0f\x5f\x75\x57\x56\xa0\x4c\x96\xf8\x0d\xe7\x9c\x9d\x89\x17\xb0\xc5\x21\xa0\xb2\x42\x1a\xa8\x86\xe6\xae\xfb\xdc\x89\x45\x58\x3f\x5f\xf0\xd1\x70\xe6\x76\xef\x32\xec\x24\xab\x2f\xe1\xd1\x5d\xab\x70\xf1\x88\x55\xac\x9f\x2f\x28\x80\xfb\x46\xc3\x46\x32\x8a\x40\xee\x19\x45\xa0\x47\x8c\x62\xfd\x7c\x71\x37\x0d\xf7\x4d\x87\xed\x87\x4d\x77\xee\x26\x64\xeb\xf8\x09\x48\xe5\x7c\xf1\x29\xad\x3b\x47\xdc\xc9\xf5\xf3\xf1\x69\x37\xdc\x3b\xe6\xb7\x37\x76\x7a\x63\x07\xa1\x44\xdb\x0d\xd6\x4c\xfd\x70\x73\xe4\xb8\xb0\x7f\xbe\x10\xba\xef\x57\xbb\xa1\xfc\xd4\x8f\x4b\xc4\x81\x33\x7e\xb8\x10\xf1\xf6\x2a\x6e\xc6\x7b\x47\x76\xa3\x18\x6f\xc6\x87\x72\xf7\xf2\x66\xa4\xfb\xb0\x83\x53\xc6\x7e\xf8\x78\xe7\x3c\x2e\x6e\xf4\xeb\xeb\xeb\xb7\x97\xaf\xb6\x20\xf7\x17\x26\x84\x7f\xa9\xab\x95\xb8\xe0\x0a\x9f\x9f\x48\x9f\x38\xe9\x6b\x2d\x7d\x5c\x4b\x1f\xc7\xfb\x7f\x9c\x93\xbe\xcc\xa5\x37\x5a\x7a\xad\xa5\x57\x4a\x7a\x93\x49\x9f\xc5\xd2\x27\xb1\xf4\x75\x2e\xbd\x4d\xa4\x2f\xac\xf4\xb9\x93\x3e\x4b\xa4\x77\xb5\xf4\x6d\x2e\xbd\x2b\xa5\x4f\x13\xe9\x55\x4b\xfb\x0a\x23\xbd\x53\xd2\x37\xd8\xd3\x48\xdf\x56\xd2\xb7\xa9\xf4\x09\xd6\xa5\xd2\x17\x8a\xd6\x36\x89\xf4\x36\x97\xbe\x8e\xc9\x5e\x65\xa5\x77\x95\xf4\x36\x96\x3e\xd7\xd2\xe7\x35\xad\xa9\x52\xe9\xeb\x52\x7a\xeb\xa4\x57\x15\x9d\x95\x19\xe9\x33\x7c\x5f\x49\xaf\x62\xe9\x4d\x23\xbd\x4a\xe9\x2c\x63\xa4\x4f\x72\xe9\xf3\x4c\x7a\x87\xfd\xad\xf4\x49\x25\xbd\xcb\x29\xce\xaa\x90\x3e\x4b\xa5\x37\x4e\xfa\x26\x96\x5e\x1b\xe9\x4d\x21\xbd\x2b\xa4\xd7\xb5\xf4\x25\xd6\x24\xd2\xa7\x46\xfa\x06\xcf\x33\xfa\x3e\x6b\xa4\x4f\x5a\xe9\x0b\xe4\xa5\x90\xde\xa4\xf4\x3d\x7c\x29\xb0\x37\x95\x3e\x2e\xc9\xef\x34\x97\xbe\x34\x14\x17\xce\x69\x5b\xe9\x4b\xc4\x6b\xe9\x3b\x9c\x09\xfb\x69\x2b\xbd\x6d\xa5\xd7\xb9\xf4\x09\xf6\xc5\xd2\x17\xec\x9b\x46\x4e\x0d\xe5\xad\xc2\x73\x47\x31\x24\x5a\xfa\xa6\xa1\x18\x34\x9e\x6b\xb2\x9f\x22\xcf\x56\xfa\x46\x73\xae\x39\x0f\xc8\x4b\x5e\x48\xdf\x66\x94\xdb\x18\x71\x67\xd2\xd7\x56\xfa\x0a\xf7\xa3\xa5\x2f\x2b\xca\x2d\x6c\x16\xb1\xf4\x8d\x92\x3e\x53\xf4\x0c\x71\x21\x76\xf8\x56\x6a\xaa\x93\x58\x4b\xef\x70\xa7\xc8\x41\x4a\x76\xe2\xea\x7e\x3d\x85\x9a\x2a\x28\xc7\xb5\xa3\xf8\xe0\xdf\xa7\xba\x3b\xd9\xf2\xe5\xa1\x3a\x66\x44\xdf\xc7\x94\x5b\xdc\xbf\xc3\xb4\xd1\x6c\x76\xb0\x23\x4e\xa3\xd9\xec\xe4\x88\x82\x3a\x39\x8d\x66\x0b\xf4\xd5\x51\x7f\xe0\xca\x9f\x02\xa3\xdc\x75\x25\x50\xca\x2d\x6f\x3f\x10\xcb\x43\x0c\x79\x4b\x6c\x81\x9a\xce\x2f\x3e\x07\x87\x0f\xc0\xf9\x73\x71\x3c\x96\x00\xf8\xe7\x22\x4d\xd3\xd3\x00\x35\xe7\x77\x61\x78\x9e\xa7\xf1\x22\x3c\x07\x38\x9e\x13\x78\xfe\x73\xdd\xf9\x79\x52\xd6\x49\x92\x55\x65\x9d\x9f\x8a\x78\xf1\x31\x9a\x29\x38\xf0\x53\x08\xf8\x43\x88\xf2\x5c\x70\xb0\xf0\xee\x3c\xfc\xfb\xf1\xf6\x2e\xd4\xe9\x41\x70\x7a\x42\x42\xf3\x25\xc9\xbc\x47\x41\x14\xca\x16\xad\x11\x2b\x6a\xc1\x9c\x21\x2a\x47\x7b\x6b\xfa\xa9\x95\xf4\x29\x5a\xb2\x95\xbe\x4e\xa9\xc5\xd0\xf6\xe9\x1d\x18\x2a\x6b\x82\x92\x96\x5b\x3e\x2b\xa9\xb5\x13\x23\x7d\x8e\x72\xb7\xd2\xdb\x8a\xf6\xe6\xa5\xf4\x71\x43\xeb\xe1\x07\xbe\x43\x8b\xa8\x5a\xfa\xba\xe0\x16\x46\xbb\x57\x04\x9b\x68\x57\xf8\x57\x54\xdc\x2e\x80\x8d\x96\xda\xb7\xca\xa5\x6f\x1d\x41\x0d\x5a\xcc\x00\x76\x15\xb5\x67\x5c\x50\x3b\x01\x2a\x94\x25\xdb\x80\x22\xc0\x8f\x29\xa9\x7d\x92\x84\xda\xb9\xb4\x04\xc9\x65\x43\x3e\x03\xfa\x02\x74\x97\x74\x2e\xe0\x2f\xb3\xb4\x1f\xb9\xc5\x3a\x40\xaf\xe5\x96\x2f\x00\x91\x15\x41\x38\xfc\xad\x1b\x8a\x13\x30\x93\x2a\x82\x5e\x07\x08\x34\x14\x73\xc8\x7b\x46\x39\x30\x09\xf9\x0b\x58\x70\x0c\xfd\x75\x45\xb9\xb7\x86\x20\x13\xe7\xeb\x8a\x21\x1f\x10\x0f\x08\x4c\x09\xb6\x71\x76\x63\xe9\x9e\xf0\x2c\xe6\x5c\xa7\x9a\xce\xd7\x4c\x0b\xc8\x85\x2a\x08\x36\x5b\x8e\x27\x57\xd2\x27\x96\xbe\x43\x7e\x70\x17\xe1\xae\x00\x8d\xcd\x2e\x04\xc5\x38\x33\x27\xbf\x9a\x56\x7a\xd3\x3e\x08\x41\xbb\xd5\xfa\x38\x20\xda\xb5\xb7\x07\x8e\xf6\x4d\x6c\x87\x51\x69\xd7\xe4\x97\x62\xd3\xc1\x20\xbf\x0d\x42\xed\x0f\x6f\x0b\x54\x71\xf1\x7d\x01\xd5\x57\x23\x54\x6e\x58\x54\xb4\xdc\xa1\x19\x21\x54\x6c\x48\x44\xa1\x43\x20\x48\x50\xf9\x35\x3a\xc7\x51\x97\xa0\x93\x81\x1c\x10\x12\xe8\x4e\x08\x0d\x20\x00\xba\x05\x24\x0c\x44\xaa\x0d\x75\x24\xc4\x47\xce\x08\x88\x6e\x00\xc1\xa7\x8c\x6e\xad\xa2\x8e\x01\x69\xa3\x23\x20\x48\x80\x6c\x38\x1f\x3e\x55\x9a\x88\x3c\xd8\xb0\x64\x17\xfe\xa2\x63\x81\x14\x65\x49\xc8\x88\xee\x02\x8a\x84\xee\x2a\x09\xed\xd2\x8c\x6c\xd5\x2d\xa1\x68\x40\x1a\x16\x29\x10\x06\xba\x24\x5f\x02\x0a\xa1\xfb\x5a\xda\x5b\x19\x12\x45\x41\xfc\xa4\x84\x24\xa5\x62\x34\xab\x68\x9f\x61\x51\x09\x71\x54\x41\xec\x01\x19\x81\xd0\x0d\xc5\x10\x84\x11\x04\x0c\xf6\xc3\x96\x26\x44\x47\x3e\x81\xde\xf0\xc1\x96\x24\x3e\xc3\x39\x8c\x4c\x10\x67\x10\x26\x10\x45\x40\x5c\xa0\x70\x5b\x12\xda\x19\xa0\xa3\x93\xde\x54\x14\x07\x84\x14\xc4\x26\xf6\x03\x9d\x60\x2b\x08\x9d\x82\x10\x56\x6f\xd1\x9f\x6b\x01\x39\x46\x0e\x20\x4e\x21\x9c\x71\x7f\x96\x99\x03\xe7\xc1\x5f\xd4\x40\xdb\x50\xdc\x10\xb8\xf0\x05\xc8\x06\xa1\x1c\x84\x98\x21\x9f\x80\xcc\x10\x54\x40\xfa\x82\xeb\x09\xeb\x70\xcf\x40\x2c\xa0\x3b\x04\x1e\xf6\xe3\xee\x1a\x47\xa2\x0d\xf5\x00\x16\x44\x2d\xc1\xd7\x9c\x19\x0c\x77\x1d\x6a\x20\xe1\x3b\x29\x28\x47\x19\x0b\xec\x2a\x23\xe6\xc1\xef\x40\xd5\x02\xac\x60\x88\xc9\x5a\x46\xdd\xb6\x20\xe4\x44\x6e\xb4\x25\x41\x0b\xe6\x09\xec\xa2\xe8\x39\x72\xd3\xb0\x70\x04\x2a\x43\x88\x83\x09\x92\x82\x06\x83\xaa\xe6\x5c\x54\x74\x3f\xa8\x33\xdc\x65\xa8\x4b\x1e\x22\x4c\x4c\x83\x06\x6c\x86\x3a\x4d\x29\xbe\x44\x51\xdd\x04\xf1\x9f\x53\x3e\x03\x03\x67\x24\x92\x0b\xae\x33\xb0\x00\x18\x16\x2c\x84\x33\x20\x6e\xc1\xb4\xdb\x98\x31\xb4\xc4\x19\x89\x65\x30\x0b\xe2\x43\xcd\x43\x7c\x87\xb8\x2d\x0b\xd3\x8c\x7c\xd1\x0d\xc5\x84\x41\x02\xbd\x89\x9a\xc0\x60\x52\xb1\x4a\x40\x4e\x33\xbd\xcb\x34\x39\xb3\x10\xfa\x56\x2b\xba\xfb\x38\xf9\x3d\x4c\xf3\x87\x51\xcc\x71\x6e\xf9\x7d\x9c\xf2\x08\x32\xf9\x7f\xb1\xc8\x7d\xf6\xc8\xca\xf2\x7b\x61\x8f\xf0\xc6\x74\xfb\xf1\xf9\xba\xfb\x2a\x0e\x01\xee\x00\x63\xd1\x1f\x25\x2b\xc4\x2d\x87\xa0\xff\x80\xe1\x0d\xab\x29\xa8\x57\xf4\x2f\xb0\x2c\xe6\x1e\x46\x3f\x40\x11\x07\x65\xcb\xca\x55\xe5\xd4\xa3\xf8\xdc\xc6\xc4\x13\x8e\xf9\x02\x58\x18\x86\xcf\x96\x70\x5f\xf3\xf9\x6d\x42\x83\x25\x30\xa5\x64\x0c\x06\xce\xe8\xed\x20\xdd\x32\x86\x6b\xaa\xf5\xa0\x28\x79\x68\x87\xb2\x2c\xb9\x97\x30\x04\x02\x27\x81\x5d\xe0\x18\xcb\x6a\xb7\x28\x89\x47\x82\x4d\x4d\x2a\x18\x18\x97\xb7\x84\xbf\x09\xf3\x62\x18\x76\x73\xc2\x1a\xe0\x2b\x38\x11\xfd\x95\x6b\x56\xb2\x96\xf8\x00\xc3\x2e\xfa\x4d\x21\x3f\x35\x61\x1d\x62\x04\x07\x01\x17\xa0\x9c\x55\x4c\x58\x0c\xfb\x15\xec\x17\xcc\x4f\x15\x29\x4f\xc4\x82\x61\x36\xbc\x30\x48\x08\xa3\xb1\x26\xf0\x80\x22\x4c\xc2\x19\xc0\x2b\xf8\xd1\xf2\x7d\x26\x19\x9d\x81\x5c\x42\x51\x67\x19\x71\x02\x38\x5f\x33\xcf\xe2\x07\x2a\x18\x18\x83\xdc\xc0\x2f\x70\x2a\x7c\x0d\xdf\x95\xe4\x47\x78\x39\xa2\x98\x23\x91\xcf\x92\x72\x9b\xd6\x84\xc9\x79\x4a\x93\x03\x6a\x00\xb1\x38\xcb\x18\xe5\x08\xbf\x0d\x4f\x17\x41\x6b\x28\x9e\x68\x1c\x73\x1e\xbf\xa0\x29\x58\x69\x63\x4d\x53\xd0\x9d\x02\x13\xc3\x8b\x81\x96\xe2\x03\xaf\xd6\x3c\x4d\xe0\xfe\xc0\x35\x98\x00\x10\x03\xb0\x54\x35\x74\x6f\xc0\xe3\xf0\x72\x26\xa1\xda\xc4\xa4\x81\xb5\xa8\x45\x4c\x16\xa8\xdf\xaa\xda\xad\xf3\x80\x99\x9a\xa6\x89\xf0\x62\xa3\xa0\xfc\x3f\x84\x99\x9f\x37\xd9\x23\x91\xf3\x73\x73\xfb\xf0\x73\xf7\x2f\x21\x47\x60\xf4\x73\x83\x5f\x0c\xa6\x07\x02\xfc\x46\x90\xba\x2f\xb6\xad\x2e\xaf\xb3\xef\x05\x59\x3f\xfd\x99\xe9\xb1\xf0\x0a\xe9\x0d\xaa\xde\xbe\x7f\x0b\x92\xa5\xa6\x36\xc7\xe0\x8b\xcf\x86\xe9\xdc\xf0\xfb\x3e\x94\x3b\xbe\x87\x44\x31\x2c\x73\x20\xf5\xf1\x3d\x86\xd6\x7a\xbb\xc7\x90\x64\xc3\xfa\x9a\x25\x60\x68\x29\x4d\x92\x25\x67\x98\x82\x94\xd2\xdb\x61\x35\xd9\xf3\xde\x2c\x27\xf9\xab\xb7\xb2\x47\x3f\x3c\xb4\xee\xcd\xd0\x23\x7b\x63\xaf\xcd\x7d\x0d\x72\xe0\xaf\x80\x47\xba\x64\xaf\xe9\x2f\x6e\x95\x63\x41\x7f\xa3\x7e\x39\x18\x2a\x37\x4d\xfe\xbd\xf4\xcc\xf3\x75\x6b\xfd\xdf\xa6\xaf\x9c\x64\x0b\x66\x04\x30\x47\xc9\x28\x9f\xb1\x0a\x31\xfc\x3a\xde\x35\x54\xce\x60\x99\x8a\x27\x5e\x28\x82\x30\x69\xf0\xab\x6d\x30\x1d\x98\x5f\xf3\xfb\xba\x92\xd5\x3e\xa6\x3c\x4c\x3d\x65\x42\x0c\x03\x66\xc3\x64\x56\xf2\x64\xbc\x6d\x03\x4c\x5d\x60\x12\xd8\x6c\x1d\x4d\x51\x29\xbf\xeb\xa9\x58\x15\x60\x6a\xb2\xdb\x49\xb9\x22\xd6\xae\x1d\xa9\x1e\xd8\x09\x2a\xc4\x50\x0b\x83\x39\xa1\x8e\x30\x99\xa0\x6d\xc1\x5a\x25\xbf\x5a\x77\xdc\xbe\x60\x68\xd8\x0e\xd3\xae\x22\x55\xd4\x30\xf3\x63\x7d\x50\x1b\xdc\x92\x98\xd4\xc1\xde\x49\xfc\xbf\x00\x00\x00\xff\xff\x4c\xb8\xbc\xa5\x00\x20\x00\x00")

func pkgTemplatesTemplates_bindGoBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesTemplates_bindGo,
		"pkg/templates/templates_bind.go",
	)
}

func pkgTemplatesTemplates_bindGo() (*asset, error) {
	bytes, err := pkgTemplatesTemplates_bindGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/templates_bind.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1681470572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x41\x6a\xeb\x40\x10\x44\xf7\x3e\x45\x81\x17\xff\x07\x12\x6b\xaf\x13\x64\x15\x8c\x43\x0e\x30\x9a\xb4\xdc\x03\xd2\xb4\xd2\x5d\x83\x11\xc6\x77\x0f\x96\x31\x59\xd6\x7b\xf0\x4a\x2d\xd8\xe3\x7a\x3d\xbc\x5b\xf0\x76\xc3\x1e\xc7\x46\xac\xd6\x1c\x77\x05\x15\x17\xfc\x3f\xc9\x4f\x2b\x2e\xdf\x2f\x50\x72\x89\xbe\xeb\xe6\x35\xdb\xbc\xa4\xba\x1e\xb2\xcd\x3b\x37\xe3\x97\x4f\xc7\x44\xdd\x62\xa7\xbf\xbd\x35\x3f\xdb\x80\x25\x51\x5f\x11\x86\x42\x5c\xac\xfe\x23\xb2\xd5\x71\x2a\x99\xb8\x14\xea\xe3\xd3\xa8\xe2\x28\xf5\xec\x12\x01\xb7\x46\x09\x74\x83\xb9\xa4\xa9\xc4\x2e\x24\xbb\xf0\x23\xcd\xd2\xe3\x09\xdf\x1e\x30\xb0\xc7\x5d\xc0\x46\x50\x05\x4f\x4a\x4d\xc4\x20\x93\xd5\x73\x80\xb6\xb9\x52\x47\x4f\x41\x6f\x99\xcd\x25\x7e\x03\x00\x00\xff\xff\xd6\xb1\x4d\x61\x04\x01\x00\x00")

func pkgTemplatesValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesValuesYaml,
		"pkg/templates/values.yaml",
	)
}

func pkgTemplatesValuesYaml() (*asset, error) {
	bytes, err := pkgTemplatesValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/values.yaml", size: 260, mode: os.FileMode(420), modTime: time.Unix(1681360694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/templates/accounts.yaml":            pkgTemplatesAccountsYaml,
	"pkg/templates/cluster-secrets.yaml":     pkgTemplatesClusterSecretsYaml,
	"pkg/templates/cluster.yaml":             pkgTemplatesClusterYaml,
	"pkg/templates/config-template.ini":      pkgTemplatesConfigTemplateIni,
	"pkg/templates/credentials-template.ini": pkgTemplatesCredentialsTemplateIni,
	"pkg/templates/index.html":               pkgTemplatesIndexHtml,
	"pkg/templates/secrets.yaml":             pkgTemplatesSecretsYaml,
	"pkg/templates/templates_bind.go":        pkgTemplatesTemplates_bindGo,
	"pkg/templates/values.yaml":              pkgTemplatesValuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"accounts.yaml":            &bintree{pkgTemplatesAccountsYaml, map[string]*bintree{}},
			"cluster-secrets.yaml":     &bintree{pkgTemplatesClusterSecretsYaml, map[string]*bintree{}},
			"cluster.yaml":             &bintree{pkgTemplatesClusterYaml, map[string]*bintree{}},
			"config-template.ini":      &bintree{pkgTemplatesConfigTemplateIni, map[string]*bintree{}},
			"credentials-template.ini": &bintree{pkgTemplatesCredentialsTemplateIni, map[string]*bintree{}},
			"index.html":               &bintree{pkgTemplatesIndexHtml, map[string]*bintree{}},
			"secrets.yaml":             &bintree{pkgTemplatesSecretsYaml, map[string]*bintree{}},
			"templates_bind.go":        &bintree{pkgTemplatesTemplates_bindGo, map[string]*bintree{}},
			"values.yaml":              &bintree{pkgTemplatesValuesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
