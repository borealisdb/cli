// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// pkg/templates/accounts.yaml
// pkg/templates/cluster-secrets.yaml
// pkg/templates/cluster.yaml
// pkg/templates/config-template.ini
// pkg/templates/credentials-template.ini
// pkg/templates/index.html
// pkg/templates/secrets.yaml
// pkg/templates/templates_bind.go
// pkg/templates/values.yaml
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgTemplatesAccountsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\xbb\xaa\xc3\x30\x10\x84\xe1\x5e\x4f\x31\xf8\xd4\xf6\x21\xad\xaa\x5c\xfa\x94\xe9\xd7\xd2\x16\x22\x5a\xad\x91\xe4\x80\x31\x7e\xf7\xe0\x4b\x48\x91\x72\x86\xef\xa7\x21\x3c\x38\x97\xa0\xc9\xa2\xd7\xcc\x14\x43\xf1\x7d\x17\xf4\xff\x75\x32\xcf\x90\xbc\xc5\xf5\xb8\x6f\x71\x2c\x95\xf3\xc5\x39\x1d\x53\x35\xc2\x95\x3c\x55\xb2\x06\x48\x24\x6c\x31\xcf\xdd\x61\xee\x24\xbc\x2c\x2d\xed\xb4\x18\x20\x52\xcf\xb1\xac\x16\x70\x5f\xf4\x1b\x99\x32\xb0\x5b\xdd\x27\xde\x9b\x16\x2c\x14\xa2\x45\xd3\xe0\x0f\x93\x8e\x79\xdb\x67\xa7\x32\x50\x9a\x3a\xa7\xb2\x39\x20\x6b\x64\x0b\xf2\x12\x92\x79\x07\x00\x00\xff\xff\x65\x90\x8f\x18\xde\x00\x00\x00")

func pkgTemplatesAccountsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesAccountsYaml,
		"pkg/templates/accounts.yaml",
	)
}

func pkgTemplatesAccountsYaml() (*asset, error) {
	bytes, err := pkgTemplatesAccountsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/accounts.yaml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1679033195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesClusterSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\xc2\x40\x10\x44\xfb\xfb\x8a\x25\xbd\x82\xed\x75\x22\x16\x22\x68\x21\xd8\x6f\x36\x53\x1c\x49\x2e\xe7\xed\x46\x09\x21\xff\x2e\x9a\xa8\x85\xed\xbc\x37\xc3\x70\x0a\x57\x64\x0d\x5d\xf4\x74\xdf\xb8\x3a\xc4\xca\xd3\x05\x92\x61\xae\x85\x71\xc5\xc6\xde\x11\x45\x6e\xe1\x69\x1c\xd7\xbb\xa6\x57\x43\x3e\x71\x8b\x69\x5a\xe9\xdb\x54\x47\xd4\x70\x89\x46\x5f\x2a\x91\xfc\x9c\xff\x8e\xb3\x21\xc1\xd3\x39\xf1\xad\x87\xfb\xec\xf3\x43\xb7\x22\x50\x3d\x62\x38\x54\x9e\x8a\x62\x0e\xe7\x2b\x5f\xb4\x80\x92\xa5\xee\xd3\x3e\x4a\x1e\x92\x85\x2e\x2e\xe4\x19\x00\x00\xff\xff\x02\x34\xec\x9d\xcd\x00\x00\x00")

func pkgTemplatesClusterSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesClusterSecretsYaml,
		"pkg/templates/cluster-secrets.yaml",
	)
}

func pkgTemplatesClusterSecretsYaml() (*asset, error) {
	bytes, err := pkgTemplatesClusterSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/cluster-secrets.yaml", size: 205, mode: os.FileMode(420), modTime: time.Unix(1679388375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xbd\x6e\xe3\x40\x0c\x84\xfb\x7d\x8a\x81\xaf\xb7\xe1\xc3\x55\xdb\x1d\xae\x38\xa7\x49\x8c\xfc\x35\x41\x0a\x4a\xa2\x25\x22\xda\xa5\xb2\xe4\x06\x36\x0c\xbd\x7b\x20\x35\x4e\x49\x90\xf3\x71\x66\x68\x92\x57\x2e\x26\x9a\x23\x36\x8d\x16\xa6\x51\xac\x6b\xb6\xa2\xbb\xaf\xfd\x26\x7c\x48\xee\x22\x8e\x6a\xde\x17\xb6\xcf\x31\x24\x76\xea\xc8\x29\x06\x20\x53\xe2\x88\xeb\x75\xfb\x6f\xac\xe6\x5c\xee\x29\xf1\x3c\x07\x9b\xb8\x5d\xd6\x89\xce\x7f\xc7\x51\x5b\x72\xee\x9e\x5c\x0b\xf5\x1c\xb1\xff\x2f\x8b\xb2\xa6\x86\xcb\xc3\xe9\x2e\x9b\x53\x6e\xd9\x22\x7e\x07\x80\xaa\x0f\x9c\x5d\x5a\xf2\xc5\x50\x00\x80\x41\xcd\xd7\x27\x07\x35\x9f\x67\xfc\xc2\x81\x0b\x43\x1c\xbd\xb2\xe1\xa2\xb5\xac\x37\xe0\x73\xc4\xe0\x3e\x59\xdc\xed\xd2\xa5\xd5\x34\x51\xbe\x6c\x45\x57\x4a\x51\xf5\x97\x32\x1e\xc9\x87\x15\xf6\x78\x9b\x57\xe6\xf3\x20\x06\x31\xf8\xc0\x30\x4a\x0c\xb2\x9f\x1a\x48\x86\xe4\x53\x21\xf3\x52\x5b\xaf\x85\x0d\xad\xe6\x93\xf4\xb5\xac\x5e\x03\xb0\xb4\xd2\x90\x2d\x59\xde\xde\x03\xc0\xb9\x97\xcc\xb7\x72\xf7\x7f\x36\xe1\x3b\x00\x00\xff\xff\x4e\xe4\xae\xba\x6e\x01\x00\x00")

func pkgTemplatesClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesClusterYaml,
		"pkg/templates/cluster.yaml",
	)
}

func pkgTemplatesClusterYaml() (*asset, error) {
	bytes, err := pkgTemplatesClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/cluster.yaml", size: 366, mode: os.FileMode(420), modTime: time.Unix(1679902075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesConfigTemplateIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x31\x6a\xc4\x40\x0c\x45\x7b\x9d\x62\xd8\x3e\xce\x09\xdc\x85\x10\xd8\x66\x09\xa4\x32\x66\xd0\xda\xf2\xda\x89\x18\x2d\x92\xbc\x8d\xd1\xdd\x43\x66\x20\x81\xb4\xff\x7d\xde\x1b\x6e\x54\x48\x91\x47\x60\xb9\x65\xa6\x07\x71\xea\xd3\x56\x16\x81\xbb\xca\x27\x4d\x9e\x17\xe1\x99\x34\xf5\xe9\x38\xba\x4b\xdb\x5e\xeb\x14\x01\xab\x98\x37\xf2\x26\xe6\x11\xa0\x22\x9e\x77\xe5\x7c\x47\x5f\x1b\x79\x17\xf1\x0f\xe5\x0b\xfa\x1a\x01\x30\x38\xdb\x08\x13\xe6\x89\xd4\x33\xcb\x84\xbe\x49\x49\x3d\xc0\x60\x26\x23\x98\x49\x36\x47\xad\x9a\x6a\xd8\x96\x54\x28\xd5\x42\x3a\x9d\x22\xfe\x72\xff\xed\xcf\xb8\xfb\x7a\x1c\x4f\x89\xca\x5c\x5b\x5f\xfb\x95\xb4\x90\x93\x8d\x30\x6f\x86\x57\xa6\xfc\xb3\x3d\xb0\xa9\xbb\xf3\xef\xa1\x7b\x69\xfc\xdc\x70\xc4\x77\x00\x00\x00\xff\xff\x4b\xc1\xf4\x15\x1b\x01\x00\x00")

func pkgTemplatesConfigTemplateIniBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesConfigTemplateIni,
		"pkg/templates/config-template.ini",
	)
}

func pkgTemplatesConfigTemplateIni() (*asset, error) {
	bytes, err := pkgTemplatesConfigTemplateIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/config-template.ini", size: 283, mode: os.FileMode(420), modTime: time.Unix(1670499796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesCredentialsTemplateIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x4e\x2c\x2d\xc9\x88\xe5\x2a\xc9\xcf\x4e\xcd\x53\xb0\xe5\x4a\xce\xc9\x4c\xcd\x2b\x89\xcf\x4c\x41\xb0\x8b\x53\x93\x8b\x52\x4b\x14\x6c\xb9\x00\x01\x00\x00\xff\xff\x64\xc8\xb4\x53\x2b\x00\x00\x00")

func pkgTemplatesCredentialsTemplateIniBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesCredentialsTemplateIni,
		"pkg/templates/credentials-template.ini",
	)
}

func pkgTemplatesCredentialsTemplateIni() (*asset, error) {
	bytes, err := pkgTemplatesCredentialsTemplateIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/credentials-template.ini", size: 43, mode: os.FileMode(420), modTime: time.Unix(1662353333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4f\x6b\xf3\x30\x0c\xc6\xef\xf9\x14\x7a\x7d\x6e\xde\xac\x3d\xed\x60\x07\xba\xc2\x60\x30\x76\x5a\x61\x57\xd5\xd6\x6a\x81\xff\x64\xb1\xdc\xac\xdf\x7e\x24\x19\x74\xf5\xc5\xe8\xa7\x47\x0f\x8f\xa4\xff\xb9\x6c\xe5\x3a\x10\x78\x89\xa1\x6f\xf4\xfc\x41\xc0\x74\x36\x8a\x92\x9a\x01\xa1\xeb\x1b\x00\x1d\x49\x10\xac\xc7\xb1\x90\x18\x75\x7c\x7f\x6e\x1f\xd5\xad\x91\x30\x92\x51\x17\xa6\x69\xc8\xa3\xa8\x06\x7e\x9f\xcd\x49\x28\x89\x51\x13\x3b\xf1\xc6\xd1\x85\x2d\xb5\x4b\xb1\x81\x5a\x68\x6c\x8b\xc5\x80\xa7\x40\x26\xe5\x0d\x70\x62\x61\x0c\x0b\x24\xb3\xfd\xff\xb0\x81\x88\xdf\x1c\x6b\xbc\x43\x9c\xee\xd1\x9f\x20\x5e\x64\x68\xe9\xab\xf2\xc5\xa8\x8f\xf6\xb8\x6f\x0f\x39\x0e\x28\x7c\x0a\xa4\x6e\x69\x98\x0c\xb9\x33\xad\x73\xc2\x12\xa8\x7f\xca\x23\x61\xe0\x02\x87\xd7\x17\xdd\xad\xac\xd1\xdd\xba\xbf\x3e\x65\x77\x5d\xc4\x7e\xdb\xef\xab\x78\x4a\xc2\x16\x85\x73\x82\x52\xad\xa5\x52\x3e\x6b\xd0\x9d\xdf\xae\xa2\x5d\xff\x96\x27\xb8\xe6\x0a\x16\x13\xd8\x90\x0b\x81\x78\x2e\x30\x71\x72\x79\xd2\x9d\xdf\xcd\xe6\xab\xab\xee\x96\xe3\xff\x04\x00\x00\xff\xff\x63\xce\x19\xf8\x8c\x01\x00\x00")

func pkgTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesIndexHtml,
		"pkg/templates/index.html",
	)
}

func pkgTemplatesIndexHtml() (*asset, error) {
	bytes, err := pkgTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/index.html", size: 396, mode: os.FileMode(420), modTime: time.Unix(1662353333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x4a\x43\x31\x10\x46\xf7\x79\x8a\xe1\x76\x7b\x05\xdd\x66\x57\x14\xa4\x0b\x7f\xc0\x9f\x7d\xcc\xfd\x7a\x1d\x9a\x66\xe2\xcc\xa4\xe0\xdb\x8b\x6d\x45\xa8\x76\x9b\x73\xce\x47\x98\xd4\xf8\x15\x6a\x2c\x35\xd2\xee\x2a\x6c\xb8\x4e\x91\x9e\x90\x15\x1e\xb6\xf0\x34\x25\x4f\x31\x10\xd5\xb4\x45\xa4\x37\x51\xa4\xc2\x76\x61\x7b\xc3\x82\x7f\x36\x44\x7a\x68\xe9\xa3\x23\xfc\xb8\xc2\x53\x7e\x54\xd9\xf1\x04\x5d\xdd\x44\x1a\x86\x93\xc7\xfb\xfd\xd8\x30\xd0\x82\x6e\x45\xe6\x82\x91\x96\xdd\xdf\x2f\x47\xba\xe3\xac\x62\xb2\xf6\x91\x96\xad\x15\x9c\x84\xd7\x85\x51\xfd\xdf\xcd\x03\x3a\xfc\xfc\x2c\x5e\x99\x75\xe8\x8b\x96\xa3\x91\xff\x46\xb9\x74\x73\xe8\xb3\x6c\x50\x7f\x01\x2d\x8e\x47\xa1\xb5\x28\xcd\xa8\xd0\xe4\x5c\x67\x6a\x62\x3e\x2b\x8c\xfc\x3b\xb0\xf0\x15\x00\x00\xff\xff\x65\xd1\x85\x43\x50\x01\x00\x00")

func pkgTemplatesSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesSecretsYaml,
		"pkg/templates/secrets.yaml",
	)
}

func pkgTemplatesSecretsYaml() (*asset, error) {
	bytes, err := pkgTemplatesSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/secrets.yaml", size: 336, mode: os.FileMode(420), modTime: time.Unix(1679388181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesTemplates_bindGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\xdb\x6e\x1c\xb9\x11\x7d\x9e\xfe\x0a\xae\x80\x5d\xcc\x04\xda\x51\xdf\x2f\x02\x04\x24\xeb\x75\x10\x3f\xc4\x0b\xc4\xce\x43\x10\x06\x06\xc9\x26\xe5\x86\x47\xd3\x4a\x77\x8f\x97\xb2\xe1\x7f\x0f\x0e\xab\x46\x96\x3c\x17\xad\x2c\x3b\x0f\xb2\x35\x3d\x64\xb1\xaa\x58\x75\xce\xa9\xd6\xd9\x99\x78\xd6\xb7\x56\x5c\xda\xb5\x1d\xd4\x64\x5b\xe1\xfa\x41\x5c\x2b\xf3\x4e\x5d\x5a\x31\xd9\xab\xeb\x95\x9a\xec\x28\xf4\x8d\xb8\xec\x7f\xd6\xdd\xba\x55\x93\x12\xbf\xfe\x26\x5e\xfe\xf6\x5a\x3c\xff\xf5\xc5\xeb\xa5\x98\xff\xf9\x76\xf3\x22\x3a\x3b\x13\x63\xbf\x19\x8c\x1d\xcf\xf1\xfb\xf5\xbb\xcb\xb3\x5b\x23\x67\xca\x98\x7e\xb3\x9e\xc6\xe5\x8d\xba\x5a\xed\x7e\x6d\x56\x9b\x71\xb2\xc3\xcf\xa3\x35\x83\x7d\x68\xd5\xa1\x6f\xfb\xb5\xeb\x2e\x7f\xde\x3e\x58\x76\xeb\x6e\xcf\xa2\xc1\xb6\x76\x3d\x75\x6a\x35\x3e\xb0\xb2\x5b\xb7\xd6\x2f\xdf\x4e\xfb\x8e\x3a\xee\xe6\xed\x6f\x6f\x90\xb4\xe5\x65\xbf\xbb\xe4\xbd\x5a\x6d\x2c\xef\xdf\xc9\x78\x14\x75\x57\xd7\xfd\x30\x89\x79\x34\x3b\xd1\x37\x93\x1d\x4f\xa2\xd9\x89\xe9\xaf\xae\x07\x3b\x8e\x67\x97\x1f\xba\x6b\x3c\x70\x57\x13\xfe\xeb\x7a\xfa\xf7\xac\xeb\x37\x53\xb7\xc2\x87\x3e\x6c\xb8\x56\xd3\xdb\x33\xd7\xad\x2c\x7e\xc1\x83\x71\x1a\xba\xf5\x65\xf8\x6e\xea\xae\xec\x49\xb4\x88\x22\xb7\x59\x1b\xc1\x77\xfb\x0f\xab\xda\x79\xb8\xe4\x7f\xff\x07\xc7\x9e\x8a\xb5\xba\xb2\x82\xb6\x2d\xc4\x7c\xfb\xd4\x0e\x43\x3f\x2c\xc4\xc7\x68\x76\xf9\x21\x7c\x12\xe7\x17\x02\x5e\x2d\x5f\xda\xdf\x61\xc4\x0e\xf3\xe0\x36\x3e\xff\xb2\x71\xce\x0e\xc1\xec\x62\x11\xcd\x3a\x17\x36\xfc\x70\x21\xd6\xdd\x0a\x26\x66\x83\x9d\x36\xc3\x1a\x1f\x4f\x85\xbb\x9a\x96\xcf\x61\xdd\xcd\x4f\x60\x48\xfc\xf8\xdf\x73\xf1\xe3\xfb\x13\xf2\x24\x9c\xb5\x88\x66\x9f\xa2\x68\xf6\x5e\x0d\x42\x6f\x9c\xa0\x73\xe8\x90\x68\xf6\x86\xdc\xb9\x10\x5d\xbf\x7c\xd6\x5f\xdf\xcc\x7f\xd2\x1b\x77\x2a\x2e\x3f\x2c\xa2\x99\x59\x3d\xdf\x7a\xba\x7c\xb6\xea\x47\x3b\x5f\x44\xdf\xca\x1f\x98\x21\xfb\x07\x0c\xd9\x61\x20\xbf\xf9\xa1\xde\xb8\xe5\x2f\x70\x7d\xbe\x38\xc5\x8a\xe8\x53\x14\x4d\x37\xd7\x56\xa8\x71\xb4\x13\x52\xbe\x31\x13\xac\x84\xf8\xf8\x3e\xa2\x59\xb7\x76\xbd\x10\xfd\xb8\xfc\x6b\xb7\xb2\x2f\xd6\xae\xbf\xdd\xc7\x57\xb8\x7d\x7e\xc7\x42\xb8\x43\x21\xf8\x1a\xa3\xd9\xd8\x7d\x08\x9f\xbb\xf5\x54\xe6\xd1\xec\x0a\x10\x20\x6e\x8d\xfe\xbd\x6f\x6d\x78\xf8\xba\xbb\xb2\x02\x65\xb2\xc4\x6f\x38\xe7\xec\x4c\xbc\x84\x2d\x0e\x01\x95\x15\xd2\x40\x35\x34\x77\xdd\x97\x4e\x2c\xc2\xfa\xf9\x82\x8f\x86\x33\xb7\x7b\x97\x61\x27\x59\x7d\x05\x8f\xee\x5a\x85\x8b\x47\xac\x62\xfd\x7c\x41\x01\xdc\x37\x1a\x36\x92\x51\x04\x72\xcf\x28\x02\x3d\x62\x14\xeb\xe7\x8b\xbb\x69\xb8\x6f\x3a\x6c\x3f\x6c\xba\x73\x37\x21\x5b\xc7\x4f\x40\x2a\xe7\x8b\xcf\x69\xdd\x39\xe2\x4e\xae\x5f\x8c\xbf\x76\xc3\xbd\x63\x7e\x7f\x6b\xa7\xb7\x76\x10\x4a\xb4\xdd\x60\xcd\xd4\x0f\x37\x47\x8e\x0b\xfb\xe7\x0b\xa1\xfb\x7e\xb5\x1b\xca\x4f\xfd\xb8\x44\x1c\x38\xe3\x87\x0b\x11\x6f\xaf\xe2\x66\xbc\x77\x64\x37\x8a\xf1\x66\x7c\x28\x77\xaf\x6e\x46\xba\x0f\x3b\x38\x65\xec\xc7\x4f\x77\xce\xe3\xe2\x46\xbf\xbe\xb9\x7e\x77\xf9\x7a\x0b\x72\x7f\x61\x42\xf8\x97\xba\x5a\x89\x0b\xae\xf0\xf9\x89\xf4\x89\x93\xbe\xd6\xd2\xc7\xb5\xf4\x71\xbc\xff\xc7\x39\xe9\xcb\x5c\x7a\xa3\xa5\xd7\x5a\x7a\xa5\xa4\x37\x99\xf4\x59\x2c\x7d\x12\x4b\x5f\xe7\xd2\xdb\x44\xfa\xc2\x4a\x9f\x3b\xe9\xb3\x44\x7a\x57\x4b\xdf\xe6\xd2\xbb\x52\xfa\x34\x91\x5e\xb5\xb4\xaf\x30\xd2\x3b\x25\x7d\x83\x3d\x8d\xf4\x6d\x25\x7d\x9b\x4a\x9f\x60\x5d\x2a\x7d\xa1\x68\x6d\x93\x48\x6f\x73\xe9\xeb\x98\xec\x55\x56\x7a\x57\x49\x6f\x63\xe9\x73\x2d\x7d\x5e\xd3\x9a\x2a\x95\xbe\x2e\xa5\xb7\x4e\x7a\x55\xd1\x59\x99\x91\x3e\xc3\xf7\x95\xf4\x2a\x96\xde\x34\xd2\xab\x94\xce\x32\x46\xfa\x24\x97\x3e\xcf\xa4\x77\xd8\xdf\x4a\x9f\x54\xd2\xbb\x9c\xe2\xac\x0a\xe9\xb3\x54\x7a\xe3\xa4\x6f\x62\xe9\xb5\x91\xde\x14\xd2\xbb\x42\x7a\x5d\x4b\x5f\x62\x4d\x22\x7d\x6a\xa4\x6f\xf0\x3c\xa3\xef\xb3\x46\xfa\xa4\x95\xbe\x40\x5e\x0a\xe9\x4d\x4a\xdf\xc3\x97\x02\x7b\x53\xe9\xe3\x92\xfc\x4e\x73\xe9\x4b\x43\x71\xe1\x9c\xb6\x95\xbe\x44\xbc\x96\xbe\xc3\x99\xb0\x9f\xb6\xd2\xdb\x56\x7a\x9d\x4b\x9f\x60\x5f\x2c\x7d\xc1\xbe\x69\xe4\xd4\x50\xde\x2a\x3c\x77\x14\x43\xa2\xa5\x6f\x1a\x8a\x41\xe3\xb9\x26\xfb\x29\xf2\x6c\xa5\x6f\x34\xe7\x9a\xf3\x80\xbc\xe4\x85\xf4\x6d\x46\xb9\x8d\x11\x77\x26\x7d\x6d\xa5\xaf\x70\x3f\x5a\xfa\xb2\xa2\xdc\xc2\x66\x11\x4b\xdf\x28\xe9\x33\x45\xcf\x10\x17\x62\x87\x6f\xa5\xa6\x3a\x89\xb5\xf4\x0e\x77\x8a\x1c\xa4\x64\x27\xae\xee\xd7\x53\xa8\xa9\x82\x72\x5c\x3b\x8a\x0f\xfe\x7d\xae\xbb\x93\x2d\x5f\x1e\xaa\x63\x46\xf4\x7d\x4c\xb9\xc5\xfd\x3b\x4c\x1b\xcd\x66\x07\x3b\xe2\x34\x9a\xcd\x4e\x8e\x28\xa8\x93\xd3\x68\xb6\x40\x5f\x1d\xf5\x07\xae\xfc\x29\x30\xca\x5d\x57\x02\xa5\xdc\xf2\xf6\x03\xb1\x3c\xc4\x90\xb7\xc4\x16\xa8\xe9\xfc\xe2\x4b\x70\xf8\x08\x9c\x3f\x17\xc7\x63\x09\x80\x7f\x2e\xd2\x34\x3d\x0d\x50\x73\x7e\x17\x86\xe7\x79\x1a\x2f\xc2\x73\x80\xe3\x39\x81\xe7\x3f\xd7\x9d\x9f\x27\x65\xd5\xc4\x59\x96\x34\xc5\xa9\x88\x17\x9f\xa2\x99\x82\x03\x3f\x85\x80\x3f\x86\x28\xcf\x05\x07\x0b\xef\xce\xc3\xbf\x9f\x6e\xef\x42\x9d\x1e\x04\xa7\x67\x24\x34\x5f\x91\xcc\x7b\x12\x44\xa1\x6c\xd1\x1a\xb1\xa2\x16\xcc\x19\xa2\x72\xb4\xb7\xa6\x9f\x5a\x49\x9f\xa2\x25\x5b\xe9\xeb\x94\x5a\x0c\x6d\x9f\xde\x81\xa1\xb2\x26\x28\x69\xb9\xe5\xb3\x92\x5a\x3b\x31\xd2\xe7\x28\x77\x2b\xbd\xad\x68\x6f\x5e\x4a\x1f\x37\xb4\x1e\x7e\xe0\x3b\xb4\x88\xaa\xa5\xaf\x0b\x6e\x61\xb4\x7b\x45\xb0\x89\x76\x85\x7f\x45\xc5\xed\x02\xd8\x68\xa9\x7d\xab\x5c\xfa\xd6\x11\xd4\xa0\xc5\x0c\x60\x57\x51\x7b\xc6\x05\xb5\x13\xa0\x42\x59\xb2\x0d\x28\x02\xfc\x98\x92\xda\x27\x49\xa8\x9d\x4b\x4b\x90\x5c\x36\xe4\x33\xa0\x2f\x40\x77\x49\xe7\x02\xfe\x32\x4b\xfb\x91\x5b\xac\x03\xf4\x5a\x6e\xf9\x02\x10\x59\x11\x84\xc3\xdf\xba\xa1\x38\x01\x33\xa9\x22\xe8\x75\x80\x40\x43\x31\x87\xbc\x67\x94\x03\x93\x90\xbf\x80\x05\xc7\xd0\x5f\x57\x94\x7b\x6b\x08\x32\x71\xbe\xae\x18\xf2\x01\xf1\x80\xc0\x94\x60\x1b\x67\x37\x96\xee\x09\xcf\x62\xce\x75\xaa\xe9\x7c\xcd\xb4\x80\x5c\xa8\x82\x60\xb3\xe5\x78\x72\x25\x7d\x62\xe9\x3b\xe4\x07\x77\x11\xee\x0a\xd0\xd8\xec\x42\x50\x8c\x33\x73\xf2\xab\x69\xa5\x37\xed\x83\x10\xb4\x5b\xad\x4f\x03\xa2\x5d\x7b\x7b\xe0\x68\xdf\xc4\x76\x18\x95\x76\x4d\x3e\x16\x9b\x0e\x06\xf9\x7d\x10\x6a\x7f\x78\x5b\xa0\x8a\x8b\x47\x03\x55\x56\xd7\x59\xf5\xbd\x80\xea\xab\x11\x2a\x37\x2c\x2a\x5a\xee\xd0\x8c\x10\x2a\x36\x24\xa2\xd0\x21\x10\x24\xa8\xfc\x1a\x9d\xe3\xa8\x4b\xd0\xc9\x40\x0e\x08\x09\x74\x27\x84\x06\x10\x00\xdd\x02\x12\x06\x22\xd5\x86\x3a\x12\xe2\x23\x67\x04\x44\x37\x80\xe0\x53\x46\xb7\x56\x51\xc7\x80\xb4\xd1\x11\x10\x24\x40\x36\x9c\x0f\x9f\x2a\x4d\x44\x1e\x6c\x58\xb2\x0b\x7f\xd1\xb1\x40\x8a\xb2\x24\x64\x44\x77\x01\x45\x42\x77\x95\x84\x76\x69\x46\xb6\xea\x96\x50\x34\x20\x0d\x8b\x14\x08\x03\x5d\x92\x2f\x01\x85\xd0\x7d\x2d\xed\xad\x0c\x89\xa2\x20\x7e\x52\x42\x92\x52\x31\x9a\x55\xb4\xcf\xb0\xa8\x84\x38\xaa\x20\xf6\x80\x8c\x40\xe8\x86\x62\x08\xc2\x08\x02\x06\xfb\x61\x4b\x13\xa2\x23\x9f\x40\x6f\xf8\x60\x4b\x12\x9f\xe1\x1c\x46\x26\x88\x33\x08\x13\x88\x22\x20\x2e\x50\xb8\x2d\x09\xed\x0c\xd0\xd1\x49\x6f\x2a\x8a\x03\x42\x0a\x62\x13\xfb\x81\x4e\xb0\x15\x84\x4e\x41\x08\xab\xb7\xe8\xcf\xb5\x80\x1c\x23\x07\x10\xa7\x10\xce\xb8\x3f\xcb\xcc\x81\xf3\xe0\x2f\x6a\xa0\x6d\x28\x6e\x08\x5c\xf8\x02\x64\x83\x50\x0e\x42\xcc\x90\x4f\x40\x66\x08\x2a\x20\x7d\xc1\xf5\x84\x75\xb8\x67\x20\x16\xd0\x1d\x02\x0f\xfb\x71\x77\x8d\x23\xd1\x86\x7a\x00\x0b\xa2\x96\xe0\x6b\xce\x0c\x86\xbb\x0e\x35\x90\xf0\x9d\x14\x94\xa3\x8c\x05\x76\x95\x11\xf3\xe0\x77\xa0\x6a\x01\x56\x30\xc4\x64\x2d\xa3\x6e\x5b\x10\x72\x22\x37\xda\x92\xa0\x05\xf3\x04\x76\x51\xf4\x1c\xb9\x69\x58\x38\x02\x95\x21\xc4\xc1\x04\x49\x41\x83\x41\x55\x73\x2e\x2a\xba\x1f\xd4\x19\xee\x32\xd4\x25\x0f\x11\x26\xa6\x41\x03\x36\x43\x9d\xa6\x14\x5f\xa2\xa8\x6e\x82\xf8\xcf\x29\x9f\x81\x81\x33\x12\xc9\x05\xd7\x19\x58\x00\x0c\x0b\x16\xc2\x19\x10\xb7\x60\xda\x6d\xcc\x18\x5a\xe2\x8c\xc4\x32\x98\x05\xf1\xa1\xe6\x21\xbe\x43\xdc\x96\x85\x69\x46\xbe\xe8\x86\x62\xc2\x20\x81\xde\x44\x4d\x60\x30\xa9\x58\x25\x20\xa7\x99\xde\x65\x9a\x9c\x59\x08\x7d\xab\x15\xdd\x7d\x9c\xfc\x11\xa6\xf9\x66\x14\x73\x9c\x5b\xfe\x18\xa7\x3c\x81\x4c\xfe\x5f\x2c\x72\x9f\x3d\xb2\xb2\x7c\x34\x7b\x34\x71\x1a\x7f\x07\xf6\x08\x6f\x4c\xb7\x1f\x5f\xac\xbb\xaf\xe2\x10\xe0\x0e\x30\x16\xfd\x51\xb2\x42\xdc\x72\x08\xfa\x0f\x18\xde\xb0\x9a\x82\x7a\x45\xff\x02\xcb\x62\xee\x61\xf4\x03\x14\x71\x50\xb6\xac\x5c\x55\x4e\x3d\x8a\xcf\x6d\x4c\x3c\xe1\x98\x2f\x80\x85\x61\xf8\x6c\x09\xf7\x35\x9f\xdf\x26\x34\x58\x02\x53\x4a\xc6\x60\xe0\x8c\xde\x0e\xd2\x2d\x63\xb8\xa6\x5a\x0f\x8a\x92\x87\x76\x28\xcb\x92\x7b\x09\x43\x20\x70\x12\xd8\x05\x8e\xb1\xac\x76\x8b\x92\x78\x24\xd8\xd4\xa4\x82\x81\x71\x79\x4b\xf8\x9b\x30\x2f\x86\x61\x37\x27\xac\x01\xbe\x82\x13\xd1\x5f\xb9\x66\x25\x6b\x89\x0f\x30\xec\xa2\xdf\x14\xf2\x53\x13\xd6\x21\x46\x70\x10\x70\x01\xca\x59\xc5\x84\xc5\xb0\x5f\xc1\x7e\xc1\xfc\x54\x91\xf2\x44\x2c\x18\x66\xc3\x0b\x83\x84\x30\x1a\x6b\x02\x0f\x28\xc2\x24\x9c\x01\xbc\x82\x1f\x2d\xdf\x67\x92\xd1\x19\xc8\x25\x14\x75\x96\x11\x27\x80\xf3\x35\xf3\x2c\x7e\xa0\x82\x81\x31\xc8\x0d\xfc\x02\xa7\xc2\xd7\xf0\x5d\x49\x7e\x84\x97\x23\x8a\x39\x12\xf9\x2c\x29\xb7\x69\x4d\x98\x9c\xa7\x34\x39\xa0\x06\x10\x8b\xb3\x8c\x51\x8e\xf0\xdb\xf0\x74\x11\xb4\x86\xe2\x89\xc6\x31\xe7\xf1\x0b\x9a\x82\x95\x36\xd6\x34\x05\xdd\x29\x30\x31\xbc\x18\x68\x29\x3e\xf0\x6a\xcd\xd3\x04\xee\x0f\x5c\x83\x09\x00\x31\x00\x4b\x55\x43\xf7\x06\x3c\x0e\x2f\x67\x12\xaa\x4d\x4c\x1a\x58\x8b\x5a\xc4\x64\x81\xfa\xad\xaa\xdd\x3a\x0f\x98\xa9\x69\x9a\x08\x2f\x36\x0a\xca\xff\x43\x98\xf9\x65\x93\x3d\x11\x39\xbf\x34\xb7\x0f\x3f\x77\xff\x12\x72\x04\x46\xbf\x34\xf8\x68\x30\x3d\x10\xe0\x77\x82\xd4\x7d\xb1\x6d\x75\x79\x9d\x3d\x16\x59\xe3\xbc\x69\xaa\xa6\xfc\xe6\xc8\xfa\xf9\xcf\x4c\x4f\x85\x57\x48\x6f\x50\xf5\xf6\xfd\x5b\x90\x2c\x35\xb5\x39\x06\x5f\x7c\x36\x4c\xe7\x86\xdf\xf7\xa1\xdc\xf1\x3d\x24\x8a\x61\x99\x03\xa9\x8f\xef\x31\xb4\xd6\xdb\x3d\x86\x24\x1b\xd6\xd7\x2c\x01\x43\x4b\x69\x92\x2c\x39\xc3\x14\xa4\x94\xde\x0e\xab\xc9\x9e\xf7\x66\x39\xc9\x5f\xbd\x95\x3d\xfa\xe1\xa1\x75\x6f\x86\x9e\xd8\x1b\x7b\x6d\xee\x6b\x90\x03\x7f\x05\x3c\xd2\x25\x7b\x4d\x3f\xba\x55\x8e\x05\xfd\x9d\xfa\xe5\x60\xa8\xdc\x34\xf9\x63\x7b\xa6\x4c\xb3\x22\xcb\xb2\xec\x5b\xf7\xcc\x8b\x75\x6b\xfd\xdf\xa6\xaf\x9c\x64\x0b\x66\x04\x30\x47\xc9\x28\x9f\xb1\x0a\x31\xfc\x3a\xde\x35\x54\xce\x60\x99\x8a\x27\x5e\x28\x82\x30\x69\xf0\xab\x6d\x30\x1d\x98\x5f\xf3\xfb\xba\x92\xd5\x3e\xa6\x3c\x4c\x3d\x65\x42\x0c\x03\x66\xc3\x64\x56\xf2\x64\xbc\x6d\x03\x4c\x5d\x60\x12\xd8\x6c\x1d\x4d\x51\x29\xbf\xeb\xa9\x58\x15\x60\x6a\xb2\xdb\x49\xb9\x22\xd6\xae\x1d\xa9\x1e\xd8\x09\x2a\xc4\x50\x0b\x83\x39\xa1\x8e\x30\x99\xa0\x6d\xc1\x5a\x25\xbf\x5a\x77\xdc\xbe\x60\x68\xd8\x0e\xd3\xae\x22\x55\xd4\x30\xf3\x63\x7d\x50\x1b\xdc\x92\x98\xd4\xc1\xde\x49\xfc\xbf\x00\x00\x00\xff\xff\xff\x75\xc2\x23\x00\x20\x00\x00")

func pkgTemplatesTemplates_bindGoBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesTemplates_bindGo,
		"pkg/templates/templates_bind.go",
	)
}

func pkgTemplatesTemplates_bindGo() (*asset, error) {
	bytes, err := pkgTemplatesTemplates_bindGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/templates_bind.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1681136429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\xca\xdb\x30\x10\x04\xe0\xbb\x9f\x62\x20\x87\xb6\xd0\xfe\x86\x1e\xfd\x00\xa5\x87\x52\x42\x42\x7b\x97\x95\x8d\x25\x90\xb5\xee\xee\xa8\xc1\x84\xbc\x7b\xb1\x43\x28\xff\x71\xe7\x63\x67\x92\x3a\x07\xdc\xef\x6f\xdf\xd5\xf9\x78\xe0\x80\x63\x23\x56\x6d\x86\x8d\x90\xc4\x04\x1f\x4f\xf2\xa7\x65\x93\xcb\x27\x24\x72\xf1\xa1\xef\xe7\x35\xea\xbc\x84\xba\xbe\x45\x9d\x3b\x53\xe5\x2f\x2b\xc7\xc0\xb4\x97\x9d\xfe\xdf\x7b\xe7\xb9\x8d\x58\x02\xd3\x67\xb8\x22\x13\x37\xad\x1f\x88\xa8\xf5\x5a\x72\x24\x6e\x99\xe9\xb9\xa9\x4c\x62\xc8\x75\x32\x71\x87\x69\xa3\x38\xfa\x51\x4d\x42\xc9\xde\xe5\x39\x4c\xf2\x33\xcc\x32\xe0\x95\xf5\x51\xab\x6b\x91\xa7\xfd\x16\xf3\xac\x75\x40\x09\x14\x67\xe7\x12\x4d\xf8\xfe\xe3\xcb\x33\x74\x1c\xb0\x01\xf4\x0a\x26\xc1\x2b\x65\x0a\xc4\x28\x45\xeb\xe4\xa0\xee\x96\xeb\xd5\x82\xd3\x5a\x64\x33\xf1\x2e\x34\x26\xa9\xcc\x31\x30\x6b\x3d\xd3\x02\x65\x5a\x07\xe8\x06\x5f\x71\xc0\x37\xb5\xfd\x91\x79\x16\x8c\x92\xeb\xf4\xb2\xec\x3b\x68\x2d\x2b\xbc\x2d\x8b\x1a\xe5\xd2\x15\x9d\x7e\xc8\x5f\x29\xc3\x36\xa5\xff\x02\x00\x00\xff\xff\xee\x4b\x23\xcd\x95\x01\x00\x00")

func pkgTemplatesValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesValuesYaml,
		"pkg/templates/values.yaml",
	)
}

func pkgTemplatesValuesYaml() (*asset, error) {
	bytes, err := pkgTemplatesValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/values.yaml", size: 405, mode: os.FileMode(420), modTime: time.Unix(1681110374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/templates/accounts.yaml":            pkgTemplatesAccountsYaml,
	"pkg/templates/cluster-secrets.yaml":     pkgTemplatesClusterSecretsYaml,
	"pkg/templates/cluster.yaml":             pkgTemplatesClusterYaml,
	"pkg/templates/config-template.ini":      pkgTemplatesConfigTemplateIni,
	"pkg/templates/credentials-template.ini": pkgTemplatesCredentialsTemplateIni,
	"pkg/templates/index.html":               pkgTemplatesIndexHtml,
	"pkg/templates/secrets.yaml":             pkgTemplatesSecretsYaml,
	"pkg/templates/templates_bind.go":        pkgTemplatesTemplates_bindGo,
	"pkg/templates/values.yaml":              pkgTemplatesValuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"accounts.yaml":            &bintree{pkgTemplatesAccountsYaml, map[string]*bintree{}},
			"cluster-secrets.yaml":     &bintree{pkgTemplatesClusterSecretsYaml, map[string]*bintree{}},
			"cluster.yaml":             &bintree{pkgTemplatesClusterYaml, map[string]*bintree{}},
			"config-template.ini":      &bintree{pkgTemplatesConfigTemplateIni, map[string]*bintree{}},
			"credentials-template.ini": &bintree{pkgTemplatesCredentialsTemplateIni, map[string]*bintree{}},
			"index.html":               &bintree{pkgTemplatesIndexHtml, map[string]*bintree{}},
			"secrets.yaml":             &bintree{pkgTemplatesSecretsYaml, map[string]*bintree{}},
			"templates_bind.go":        &bintree{pkgTemplatesTemplates_bindGo, map[string]*bintree{}},
			"values.yaml":              &bintree{pkgTemplatesValuesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
